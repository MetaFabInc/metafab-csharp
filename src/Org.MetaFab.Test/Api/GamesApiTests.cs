/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.MetaFab.Client;
using Org.MetaFab.Api;
using Org.MetaFab.Model;

namespace Org.MetaFab.Test
{
    /// <summary>
    ///  Class for testing GamesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GamesApiTests
    {
        private GamesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GamesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GamesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' GamesApi
            //Assert.IsInstanceOf(typeof(GamesApi), instance);
        }

        
        /// <summary>
        /// Test AuthGame
        /// </summary>
        [Test]
        public void AuthGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AuthGame();
            //Assert.IsInstanceOf(typeof(AuthGame200Response), response, "response is AuthGame200Response");
        }
        
        /// <summary>
        /// Test CreateGame
        /// </summary>
        [Test]
        public void CreateGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateGameRequest createGameRequest = null;
            //var response = instance.CreateGame(createGameRequest);
            //Assert.IsInstanceOf(typeof(AuthGame200Response), response, "response is AuthGame200Response");
        }
        
        /// <summary>
        /// Test GetGame
        /// </summary>
        [Test]
        public void GetGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gameId = null;
            //var response = instance.GetGame(gameId);
            //Assert.IsInstanceOf(typeof(PublicGame), response, "response is PublicGame");
        }
        
        /// <summary>
        /// Test UpdateGame
        /// </summary>
        [Test]
        public void UpdateGameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gameId = null;
            //string xAuthorization = null;
            //UpdateGameRequest updateGameRequest = null;
            //var response = instance.UpdateGame(gameId, xAuthorization, updateGameRequest);
            //Assert.IsInstanceOf(typeof(GameModel), response, "response is GameModel");
        }
        
    }

}

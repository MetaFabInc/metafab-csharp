/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.MetaFab.Client;
using Org.MetaFab.Api;
using Org.MetaFab.Model;

namespace Org.MetaFab.Test
{
    /// <summary>
    ///  Class for testing PlayersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PlayersApiTests
    {
        private PlayersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PlayersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PlayersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' PlayersApi
            //Assert.IsInstanceOf(typeof(PlayersApi), instance);
        }

        
        /// <summary>
        /// Test AuthPlayer
        /// </summary>
        [Test]
        public void AuthPlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xGameKey = null;
            //var response = instance.AuthPlayer(xGameKey);
            //Assert.IsInstanceOf(typeof(AuthPlayer200Response), response, "response is AuthPlayer200Response");
        }
        
        /// <summary>
        /// Test CreatePlayer
        /// </summary>
        [Test]
        public void CreatePlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xGameKey = null;
            //CreatePlayerRequest createPlayerRequest = null;
            //var response = instance.CreatePlayer(xGameKey, createPlayerRequest);
            //Assert.IsInstanceOf(typeof(AuthPlayer200Response), response, "response is AuthPlayer200Response");
        }
        
        /// <summary>
        /// Test GetPlayer
        /// </summary>
        [Test]
        public void GetPlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string playerId = null;
            //var response = instance.GetPlayer(playerId);
            //Assert.IsInstanceOf(typeof(PublicPlayer), response, "response is PublicPlayer");
        }
        
        /// <summary>
        /// Test GetPlayerData
        /// </summary>
        [Test]
        public void GetPlayerDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string playerId = null;
            //var response = instance.GetPlayerData(playerId);
            //Assert.IsInstanceOf(typeof(GetPlayerData200Response), response, "response is GetPlayerData200Response");
        }
        
        /// <summary>
        /// Test GetPlayers
        /// </summary>
        [Test]
        public void GetPlayersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAuthorization = null;
            //var response = instance.GetPlayers(xAuthorization);
            //Assert.IsInstanceOf(typeof(List<PublicPlayer>), response, "response is List<PublicPlayer>");
        }
        
        /// <summary>
        /// Test SetPlayerData
        /// </summary>
        [Test]
        public void SetPlayerDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string playerId = null;
            //string xAuthorization = null;
            //SetPlayerDataRequest setPlayerDataRequest = null;
            //var response = instance.SetPlayerData(playerId, xAuthorization, setPlayerDataRequest);
            //Assert.IsInstanceOf(typeof(GetPlayerData200Response), response, "response is GetPlayerData200Response");
        }
        
        /// <summary>
        /// Test UpdatePlayer
        /// </summary>
        [Test]
        public void UpdatePlayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string playerId = null;
            //string xAuthorization = null;
            //UpdatePlayerRequest updatePlayerRequest = null;
            //var response = instance.UpdatePlayer(playerId, xAuthorization, updatePlayerRequest);
            //Assert.IsInstanceOf(typeof(PlayerModel), response, "response is PlayerModel");
        }
        
    }

}

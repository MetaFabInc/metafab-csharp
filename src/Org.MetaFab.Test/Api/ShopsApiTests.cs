/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.MetaFab.Client;
using Org.MetaFab.Api;
using Org.MetaFab.Model;

namespace Org.MetaFab.Test
{
    /// <summary>
    ///  Class for testing ShopsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ShopsApiTests
    {
        private ShopsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ShopsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ShopsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ShopsApi
            //Assert.IsInstanceOf(typeof(ShopsApi), instance);
        }

        
        /// <summary>
        /// Test CreateShop
        /// </summary>
        [Test]
        public void CreateShopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAuthorization = null;
            //string xPassword = null;
            //CreateShopRequest createShopRequest = null;
            //var response = instance.CreateShop(xAuthorization, xPassword, createShopRequest);
            //Assert.IsInstanceOf(typeof(CreateShop200Response), response, "response is CreateShop200Response");
        }
        
        /// <summary>
        /// Test GetShopOffer
        /// </summary>
        [Test]
        public void GetShopOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shopId = null;
            //string shopOfferId = null;
            //var response = instance.GetShopOffer(shopId, shopOfferId);
            //Assert.IsInstanceOf(typeof(ShopOffer), response, "response is ShopOffer");
        }
        
        /// <summary>
        /// Test GetShopOffers
        /// </summary>
        [Test]
        public void GetShopOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shopId = null;
            //var response = instance.GetShopOffers(shopId);
            //Assert.IsInstanceOf(typeof(List<ShopOffer>), response, "response is List<ShopOffer>");
        }
        
        /// <summary>
        /// Test GetShops
        /// </summary>
        [Test]
        public void GetShopsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xGameKey = null;
            //var response = instance.GetShops(xGameKey);
            //Assert.IsInstanceOf(typeof(List<GetShops200ResponseInner>), response, "response is List<GetShops200ResponseInner>");
        }
        
        /// <summary>
        /// Test RemoveShopOffer
        /// </summary>
        [Test]
        public void RemoveShopOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shopId = null;
            //string shopOfferId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //var response = instance.RemoveShopOffer(shopId, shopOfferId, xAuthorization, xPassword);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test SetShopOffer
        /// </summary>
        [Test]
        public void SetShopOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shopId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //SetShopOfferRequest setShopOfferRequest = null;
            //var response = instance.SetShopOffer(shopId, xAuthorization, xPassword, setShopOfferRequest);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test UseShopOffer
        /// </summary>
        [Test]
        public void UseShopOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shopId = null;
            //string shopOfferId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //var response = instance.UseShopOffer(shopId, shopOfferId, xAuthorization, xPassword);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test WithdrawFromShop
        /// </summary>
        [Test]
        public void WithdrawFromShopTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shopId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //WithdrawFromShopRequest withdrawFromShopRequest = null;
            //var response = instance.WithdrawFromShop(shopId, xAuthorization, xPassword, withdrawFromShopRequest);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
    }

}

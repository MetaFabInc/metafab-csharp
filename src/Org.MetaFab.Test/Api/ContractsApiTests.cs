/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.MetaFab.Client;
using Org.MetaFab.Api;
using Org.MetaFab.Model;

namespace Org.MetaFab.Test
{
    /// <summary>
    ///  Class for testing ContractsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContractsApiTests
    {
        private ContractsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContractsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContractsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ContractsApi
            //Assert.IsInstanceOf(typeof(ContractsApi), instance);
        }

        
        /// <summary>
        /// Test CreateContract
        /// </summary>
        [Test]
        public void CreateContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAuthorization = null;
            //CreateContractRequest createContractRequest = null;
            //var response = instance.CreateContract(xAuthorization, createContractRequest);
            //Assert.IsInstanceOf(typeof(ContractModel), response, "response is ContractModel");
        }
        
        /// <summary>
        /// Test GetContracts
        /// </summary>
        [Test]
        public void GetContractsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xGameKey = null;
            //var response = instance.GetContracts(xGameKey);
            //Assert.IsInstanceOf(typeof(List<ContractModel>), response, "response is List<ContractModel>");
        }
        
        /// <summary>
        /// Test ReadContract
        /// </summary>
        [Test]
        public void ReadContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string func = null;
            //string args = null;
            //var response = instance.ReadContract(contractId, func, args);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test WriteContract
        /// </summary>
        [Test]
        public void WriteContractTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contractId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //WriteContractRequest writeContractRequest = null;
            //var response = instance.WriteContract(contractId, xAuthorization, xPassword, writeContractRequest);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
    }

}

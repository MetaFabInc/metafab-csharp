/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.MetaFab.Client;
using Org.MetaFab.Api;
using Org.MetaFab.Model;

namespace Org.MetaFab.Test
{
    /// <summary>
    ///  Class for testing LootboxesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LootboxesApiTests
    {
        private LootboxesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LootboxesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LootboxesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' LootboxesApi
            //Assert.IsInstanceOf(typeof(LootboxesApi), instance);
        }

        
        /// <summary>
        /// Test CreateLootboxManager
        /// </summary>
        [Test]
        public void CreateLootboxManagerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAuthorization = null;
            //string xPassword = null;
            //CreateLootboxManagerRequest createLootboxManagerRequest = null;
            //var response = instance.CreateLootboxManager(xAuthorization, xPassword, createLootboxManagerRequest);
            //Assert.IsInstanceOf(typeof(CreateLootboxManager200Response), response, "response is CreateLootboxManager200Response");
        }
        
        /// <summary>
        /// Test GetLootboxManagerLootbox
        /// </summary>
        [Test]
        public void GetLootboxManagerLootboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lootboxManagerId = null;
            //string lootboxManagerLootboxId = null;
            //var response = instance.GetLootboxManagerLootbox(lootboxManagerId, lootboxManagerLootboxId);
            //Assert.IsInstanceOf(typeof(LootboxManagerLootbox), response, "response is LootboxManagerLootbox");
        }
        
        /// <summary>
        /// Test GetLootboxManagerLootboxes
        /// </summary>
        [Test]
        public void GetLootboxManagerLootboxesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lootboxManagerId = null;
            //var response = instance.GetLootboxManagerLootboxes(lootboxManagerId);
            //Assert.IsInstanceOf(typeof(List<LootboxManagerLootbox>), response, "response is List<LootboxManagerLootbox>");
        }
        
        /// <summary>
        /// Test GetLootboxManagers
        /// </summary>
        [Test]
        public void GetLootboxManagersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xGameKey = null;
            //var response = instance.GetLootboxManagers(xGameKey);
            //Assert.IsInstanceOf(typeof(List<GetLootboxManagers200ResponseInner>), response, "response is List<GetLootboxManagers200ResponseInner>");
        }
        
        /// <summary>
        /// Test OpenLootboxManagerLootbox
        /// </summary>
        [Test]
        public void OpenLootboxManagerLootboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lootboxManagerId = null;
            //string lootboxManagerLootboxId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //var response = instance.OpenLootboxManagerLootbox(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xPassword);
            //Assert.IsInstanceOf(typeof(List<TransactionModel>), response, "response is List<TransactionModel>");
        }
        
        /// <summary>
        /// Test RemoveLootboxManagerLootbox
        /// </summary>
        [Test]
        public void RemoveLootboxManagerLootboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lootboxManagerId = null;
            //string lootboxManagerLootboxId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //var response = instance.RemoveLootboxManagerLootbox(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xPassword);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test SetLootboxManagerLootbox
        /// </summary>
        [Test]
        public void SetLootboxManagerLootboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string lootboxManagerId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest = null;
            //var response = instance.SetLootboxManagerLootbox(lootboxManagerId, xAuthorization, xPassword, setLootboxManagerLootboxRequest);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
    }

}

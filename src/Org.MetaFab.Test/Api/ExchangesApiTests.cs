/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.2
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.MetaFab.Client;
using Org.MetaFab.Api;
using Org.MetaFab.Model;

namespace Org.MetaFab.Test
{
    /// <summary>
    ///  Class for testing ExchangesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExchangesApiTests
    {
        private ExchangesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExchangesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExchangesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ExchangesApi
            //Assert.IsInstanceOf(typeof(ExchangesApi), instance);
        }

        
        /// <summary>
        /// Test CreateExchange
        /// </summary>
        [Test]
        public void CreateExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xAuthorization = null;
            //string xPassword = null;
            //CreateExchangeRequest createExchangeRequest = null;
            //var response = instance.CreateExchange(xAuthorization, xPassword, createExchangeRequest);
            //Assert.IsInstanceOf(typeof(CreateExchange200Response), response, "response is CreateExchange200Response");
        }
        
        /// <summary>
        /// Test GetExchangeOffer
        /// </summary>
        [Test]
        public void GetExchangeOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //string exchangeOfferId = null;
            //var response = instance.GetExchangeOffer(exchangeId, exchangeOfferId);
            //Assert.IsInstanceOf(typeof(ExchangeOffer), response, "response is ExchangeOffer");
        }
        
        /// <summary>
        /// Test GetExchangeOffers
        /// </summary>
        [Test]
        public void GetExchangeOffersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //var response = instance.GetExchangeOffers(exchangeId);
            //Assert.IsInstanceOf(typeof(List<ExchangeOffer>), response, "response is List<ExchangeOffer>");
        }
        
        /// <summary>
        /// Test GetExchanges
        /// </summary>
        [Test]
        public void GetExchangesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string xGameKey = null;
            //var response = instance.GetExchanges(xGameKey);
            //Assert.IsInstanceOf(typeof(List<GetExchanges200ResponseInner>), response, "response is List<GetExchanges200ResponseInner>");
        }
        
        /// <summary>
        /// Test RemoveExchangeOffer
        /// </summary>
        [Test]
        public void RemoveExchangeOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //string exchangeOfferId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //var response = instance.RemoveExchangeOffer(exchangeId, exchangeOfferId, xAuthorization, xPassword);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test SetExchangeOffer
        /// </summary>
        [Test]
        public void SetExchangeOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //SetExchangeOfferRequest setExchangeOfferRequest = null;
            //var response = instance.SetExchangeOffer(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test UseExchangeOffer
        /// </summary>
        [Test]
        public void UseExchangeOfferTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //string exchangeOfferId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //var response = instance.UseExchangeOffer(exchangeId, exchangeOfferId, xAuthorization, xPassword);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
        /// <summary>
        /// Test WithdrawFromExchange
        /// </summary>
        [Test]
        public void WithdrawFromExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //string xAuthorization = null;
            //string xPassword = null;
            //WithdrawFromExchangeRequest withdrawFromExchangeRequest = null;
            //var response = instance.WithdrawFromExchange(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest);
            //Assert.IsInstanceOf(typeof(TransactionModel), response, "response is TransactionModel");
        }
        
    }

}

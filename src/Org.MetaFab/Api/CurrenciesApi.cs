/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel BatchTransferCurrency (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest);

        /// <summary>
        /// Batch transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> BatchTransferCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest);
        /// <summary>
        /// Burn currency
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel BurnCurrency (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest);

        /// <summary>
        /// Burn currency
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> BurnCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest);
        /// <summary>
        /// Create currency
        /// </summary>
        /// <remarks>
        /// Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <returns>CreateCurrency200Response</returns>
        CreateCurrency200Response CreateCurrency (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest);

        /// <summary>
        /// Create currency
        /// </summary>
        /// <remarks>
        /// Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <returns>ApiResponse of CreateCurrency200Response</returns>
        ApiResponse<CreateCurrency200Response> CreateCurrencyWithHttpInfo (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest);
        /// <summary>
        /// Get currencies
        /// </summary>
        /// <remarks>
        /// Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetCurrencies200ResponseInner></returns>
        List<GetCurrencies200ResponseInner> GetCurrencies (string xGameKey);

        /// <summary>
        /// Get currencies
        /// </summary>
        /// <remarks>
        /// Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetCurrencies200ResponseInner></returns>
        ApiResponse<List<GetCurrencies200ResponseInner>> GetCurrenciesWithHttpInfo (string xGameKey);
        /// <summary>
        /// Get currency balance
        /// </summary>
        /// <remarks>
        /// Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>decimal</returns>
        decimal GetCurrencyBalance (string currencyId, string address = default(string), string walletId = default(string));

        /// <summary>
        /// Get currency balance
        /// </summary>
        /// <remarks>
        /// Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> GetCurrencyBalanceWithHttpInfo (string currencyId, string address = default(string), string walletId = default(string));
        /// <summary>
        /// Get currency fees
        /// </summary>
        /// <remarks>
        /// Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <returns>GetCurrencyFees200Response</returns>
        GetCurrencyFees200Response GetCurrencyFees (string currencyId);

        /// <summary>
        /// Get currency fees
        /// </summary>
        /// <remarks>
        /// Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of GetCurrencyFees200Response</returns>
        ApiResponse<GetCurrencyFees200Response> GetCurrencyFeesWithHttpInfo (string currencyId);
        /// <summary>
        /// Mint currency
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel MintCurrency (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest);

        /// <summary>
        /// Mint currency
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> MintCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest);
        /// <summary>
        /// Set currency fees
        /// </summary>
        /// <remarks>
        /// Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel SetCurrencyFees (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest);

        /// <summary>
        /// Set currency fees
        /// </summary>
        /// <remarks>
        /// Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> SetCurrencyFeesWithHttpInfo (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest);
        /// <summary>
        /// Transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel TransferCurrency (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest);

        /// <summary>
        /// Transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> TransferCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Batch transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> BatchTransferCurrencyAsync (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Batch transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BatchTransferCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Burn currency
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> BurnCurrencyAsync (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Burn currency
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BurnCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create currency
        /// </summary>
        /// <remarks>
        /// Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateCurrency200Response</returns>
        System.Threading.Tasks.Task<CreateCurrency200Response> CreateCurrencyAsync (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create currency
        /// </summary>
        /// <remarks>
        /// Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateCurrency200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCurrency200Response>> CreateCurrencyWithHttpInfoAsync (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get currencies
        /// </summary>
        /// <remarks>
        /// Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetCurrencies200ResponseInner></returns>
        System.Threading.Tasks.Task<List<GetCurrencies200ResponseInner>> GetCurrenciesAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get currencies
        /// </summary>
        /// <remarks>
        /// Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetCurrencies200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCurrencies200ResponseInner>>> GetCurrenciesWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get currency balance
        /// </summary>
        /// <remarks>
        /// Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> GetCurrencyBalanceAsync (string currencyId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get currency balance
        /// </summary>
        /// <remarks>
        /// Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> GetCurrencyBalanceWithHttpInfoAsync (string currencyId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get currency fees
        /// </summary>
        /// <remarks>
        /// Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCurrencyFees200Response</returns>
        System.Threading.Tasks.Task<GetCurrencyFees200Response> GetCurrencyFeesAsync (string currencyId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get currency fees
        /// </summary>
        /// <remarks>
        /// Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCurrencyFees200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrencyFees200Response>> GetCurrencyFeesWithHttpInfoAsync (string currencyId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mint currency
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> MintCurrencyAsync (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mint currency
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> MintCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set currency fees
        /// </summary>
        /// <remarks>
        /// Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> SetCurrencyFeesAsync (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set currency fees
        /// </summary>
        /// <remarks>
        /// Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetCurrencyFeesWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> TransferCurrencyAsync (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Transfer currency
        /// </summary>
        /// <remarks>
        /// Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> TransferCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrenciesApi : ICurrenciesApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrenciesApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel BatchTransferCurrency (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = BatchTransferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> BatchTransferCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest)
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->BatchTransferCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->BatchTransferCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->BatchTransferCurrency");
            // verify the required parameter 'batchTransferCurrencyRequest' is set
            if (batchTransferCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchTransferCurrencyRequest' when calling CurrenciesApi->BatchTransferCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/batchTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (batchTransferCurrencyRequest != null && batchTransferCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchTransferCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchTransferCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchTransferCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> BatchTransferCurrencyAsync (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await BatchTransferCurrencyWithHttpInfoAsync(currencyId, xAuthorization, xPassword, batchTransferCurrencyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch transfer currency Transfers multiple amounts of currency to multiple provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request, the proper receipients will be automatically determined, with `addresses` getting `amounts` order priority first.  Optional references may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BatchTransferCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, BatchTransferCurrencyRequest batchTransferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->BatchTransferCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->BatchTransferCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->BatchTransferCurrency");
            // verify the required parameter 'batchTransferCurrencyRequest' is set
            if (batchTransferCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchTransferCurrencyRequest' when calling CurrenciesApi->BatchTransferCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/batchTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (batchTransferCurrencyRequest != null && batchTransferCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchTransferCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchTransferCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchTransferCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel BurnCurrency (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = BurnCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, burnCurrencyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> BurnCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest)
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->BurnCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->BurnCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->BurnCurrency");
            // verify the required parameter 'burnCurrencyRequest' is set
            if (burnCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'burnCurrencyRequest' when calling CurrenciesApi->BurnCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/burns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (burnCurrencyRequest != null && burnCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burnCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burnCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BurnCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> BurnCurrencyAsync (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await BurnCurrencyWithHttpInfoAsync(currencyId, xAuthorization, xPassword, burnCurrencyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Burn currency Removes (burns) the provided amount of currency from the authenticating game or players wallet. The currency amount is permanently removed from the circulating supply of the currency.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BurnCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, BurnCurrencyRequest burnCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->BurnCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->BurnCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->BurnCurrency");
            // verify the required parameter 'burnCurrencyRequest' is set
            if (burnCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'burnCurrencyRequest' when calling CurrenciesApi->BurnCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/burns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (burnCurrencyRequest != null && burnCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burnCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burnCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BurnCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <returns>CreateCurrency200Response</returns>
        public CreateCurrency200Response CreateCurrency (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest)
        {
             ApiResponse<CreateCurrency200Response> localVarResponse = CreateCurrencyWithHttpInfo(xAuthorization, xPassword, createCurrencyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <returns>ApiResponse of CreateCurrency200Response</returns>
        public ApiResponse<CreateCurrency200Response> CreateCurrencyWithHttpInfo (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->CreateCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->CreateCurrency");
            // verify the required parameter 'createCurrencyRequest' is set
            if (createCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCurrencyRequest' when calling CurrenciesApi->CreateCurrency");

            var localVarPath = "/v1/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createCurrencyRequest != null && createCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCurrency200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateCurrency200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCurrency200Response)));
        }

        /// <summary>
        /// Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateCurrency200Response</returns>
        public async System.Threading.Tasks.Task<CreateCurrency200Response> CreateCurrencyAsync (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateCurrency200Response> localVarResponse = await CreateCurrencyWithHttpInfoAsync(xAuthorization, xPassword, createCurrencyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create currency Creates a new game currency and deploys an ERC20 token contract on behalf of the authenticating game's primary wallet. The deployed ERC20 contract is preconfigured to fully support bridging across blockchains, batched transfers and gasless transactions on any supported blockchain as well as full support for gasless transactions from player managed wallets.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateCurrency200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCurrency200Response>> CreateCurrencyWithHttpInfoAsync (string xAuthorization, string xPassword, CreateCurrencyRequest createCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->CreateCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->CreateCurrency");
            // verify the required parameter 'createCurrencyRequest' is set
            if (createCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCurrencyRequest' when calling CurrenciesApi->CreateCurrency");

            var localVarPath = "/v1/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createCurrencyRequest != null && createCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCurrency200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateCurrency200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCurrency200Response)));
        }

        /// <summary>
        /// Get currencies Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetCurrencies200ResponseInner></returns>
        public List<GetCurrencies200ResponseInner> GetCurrencies (string xGameKey)
        {
             ApiResponse<List<GetCurrencies200ResponseInner>> localVarResponse = GetCurrenciesWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get currencies Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetCurrencies200ResponseInner></returns>
        public ApiResponse<List<GetCurrencies200ResponseInner>> GetCurrenciesWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling CurrenciesApi->GetCurrencies");

            var localVarPath = "/v1/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCurrencies200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetCurrencies200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCurrencies200ResponseInner>)));
        }

        /// <summary>
        /// Get currencies Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetCurrencies200ResponseInner></returns>
        public async System.Threading.Tasks.Task<List<GetCurrencies200ResponseInner>> GetCurrenciesAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GetCurrencies200ResponseInner>> localVarResponse = await GetCurrenciesWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get currencies Returns an array of active currencies for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetCurrencies200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCurrencies200ResponseInner>>> GetCurrenciesWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling CurrenciesApi->GetCurrencies");

            var localVarPath = "/v1/currencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCurrencies200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetCurrencies200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCurrencies200ResponseInner>)));
        }

        /// <summary>
        /// Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>decimal</returns>
        public decimal GetCurrencyBalance (string currencyId, string address = default(string), string walletId = default(string))
        {
             ApiResponse<decimal> localVarResponse = GetCurrencyBalanceWithHttpInfo(currencyId, address, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        public ApiResponse<decimal> GetCurrencyBalanceWithHttpInfo (string currencyId, string address = default(string), string walletId = default(string))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->GetCurrencyBalance");

            var localVarPath = "/v1/currencies/{currencyId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencyBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> GetCurrencyBalanceAsync (string currencyId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<decimal> localVarResponse = await GetCurrencyBalanceWithHttpInfoAsync(currencyId, address, walletId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get currency balance Returns the current currency balance of the provided wallet address or or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal>> GetCurrencyBalanceWithHttpInfoAsync (string currencyId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->GetCurrencyBalance");

            var localVarPath = "/v1/currencies/{currencyId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencyBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <returns>GetCurrencyFees200Response</returns>
        public GetCurrencyFees200Response GetCurrencyFees (string currencyId)
        {
             ApiResponse<GetCurrencyFees200Response> localVarResponse = GetCurrencyFeesWithHttpInfo(currencyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of GetCurrencyFees200Response</returns>
        public ApiResponse<GetCurrencyFees200Response> GetCurrencyFeesWithHttpInfo (string currencyId)
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->GetCurrencyFees");

            var localVarPath = "/v1/currencies/{currencyId}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencyFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCurrencyFees200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCurrencyFees200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCurrencyFees200Response)));
        }

        /// <summary>
        /// Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCurrencyFees200Response</returns>
        public async System.Threading.Tasks.Task<GetCurrencyFees200Response> GetCurrencyFeesAsync (string currencyId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetCurrencyFees200Response> localVarResponse = await GetCurrencyFeesWithHttpInfoAsync(currencyId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get currency fees Returns the current fee recipient address and fees of the currency for the provided currencyId. Fees are only applicable for gasless transactions performed by default by players.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCurrencyFees200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCurrencyFees200Response>> GetCurrencyFeesWithHttpInfoAsync (string currencyId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->GetCurrencyFees");

            var localVarPath = "/v1/currencies/{currencyId}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencyFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCurrencyFees200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCurrencyFees200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCurrencyFees200Response)));
        }

        /// <summary>
        /// Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel MintCurrency (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = MintCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, mintCurrencyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> MintCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest)
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->MintCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->MintCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->MintCurrency");
            // verify the required parameter 'mintCurrencyRequest' is set
            if (mintCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'mintCurrencyRequest' when calling CurrenciesApi->MintCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/mints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (mintCurrencyRequest != null && mintCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mintCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mintCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MintCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> MintCurrencyAsync (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await MintCurrencyWithHttpInfoAsync(currencyId, xAuthorization, xPassword, mintCurrencyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mint currency Creates (mints) the provided amount of currency to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> MintCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, MintCurrencyRequest mintCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->MintCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->MintCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->MintCurrency");
            // verify the required parameter 'mintCurrencyRequest' is set
            if (mintCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'mintCurrencyRequest' when calling CurrenciesApi->MintCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/mints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (mintCurrencyRequest != null && mintCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mintCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mintCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MintCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel SetCurrencyFees (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = SetCurrencyFeesWithHttpInfo(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> SetCurrencyFeesWithHttpInfo (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest)
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->SetCurrencyFees");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->SetCurrencyFees");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->SetCurrencyFees");
            // verify the required parameter 'setCurrencyFeesRequest' is set
            if (setCurrencyFeesRequest == null)
                throw new ApiException(400, "Missing required parameter 'setCurrencyFeesRequest' when calling CurrenciesApi->SetCurrencyFees");

            var localVarPath = "/v1/currencies/{currencyId}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setCurrencyFeesRequest != null && setCurrencyFeesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setCurrencyFeesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setCurrencyFeesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCurrencyFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> SetCurrencyFeesAsync (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await SetCurrencyFeesWithHttpInfoAsync(currencyId, xAuthorization, xPassword, setCurrencyFeesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set currency fees Sets the recipient address, basis points, fixed amount and cap amount for a currency's fees.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCurrencyFeesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetCurrencyFeesWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, SetCurrencyFeesRequest setCurrencyFeesRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->SetCurrencyFees");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->SetCurrencyFees");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->SetCurrencyFees");
            // verify the required parameter 'setCurrencyFeesRequest' is set
            if (setCurrencyFeesRequest == null)
                throw new ApiException(400, "Missing required parameter 'setCurrencyFeesRequest' when calling CurrenciesApi->SetCurrencyFees");

            var localVarPath = "/v1/currencies/{currencyId}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setCurrencyFeesRequest != null && setCurrencyFeesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setCurrencyFeesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setCurrencyFeesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCurrencyFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel TransferCurrency (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = TransferCurrencyWithHttpInfo(currencyId, xAuthorization, xPassword, transferCurrencyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> TransferCurrencyWithHttpInfo (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest)
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->TransferCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->TransferCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->TransferCurrency");
            // verify the required parameter 'transferCurrencyRequest' is set
            if (transferCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferCurrencyRequest' when calling CurrenciesApi->TransferCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (transferCurrencyRequest != null && transferCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> TransferCurrencyAsync (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await TransferCurrencyWithHttpInfoAsync(currencyId, xAuthorization, xPassword, transferCurrencyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer currency Transfers an amount of currency to the provided wallet address or wallet address associated with the provided walletId. If you want to transfer to multiple wallets with different amounts and optional references in one API request, please see the Batch transfer currency documentation.  An optional reference may be included for the transfer. References are useful for identifying transfers intended to pay for items, trades, services and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyId">Any currency id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCurrencyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> TransferCurrencyWithHttpInfoAsync (string currencyId, string xAuthorization, string xPassword, TransferCurrencyRequest transferCurrencyRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'currencyId' is set
            if (currencyId == null)
                throw new ApiException(400, "Missing required parameter 'currencyId' when calling CurrenciesApi->TransferCurrency");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling CurrenciesApi->TransferCurrency");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling CurrenciesApi->TransferCurrency");
            // verify the required parameter 'transferCurrencyRequest' is set
            if (transferCurrencyRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferCurrencyRequest' when calling CurrenciesApi->TransferCurrency");

            var localVarPath = "/v1/currencies/{currencyId}/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyId != null) localVarPathParams.Add("currencyId", this.Configuration.ApiClient.ParameterToString(currencyId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (transferCurrencyRequest != null && transferCurrencyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferCurrencyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferCurrencyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

    }
}

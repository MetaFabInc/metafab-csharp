/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch mint collection items
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel BatchMintCollectionItems (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest);

        /// <summary>
        /// Batch mint collection items
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> BatchMintCollectionItemsWithHttpInfo (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest);
        /// <summary>
        /// Batch transfer collection items
        /// </summary>
        /// <remarks>
        /// Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel BatchTransferCollectionItems (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest);

        /// <summary>
        /// Batch transfer collection items
        /// </summary>
        /// <remarks>
        /// Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> BatchTransferCollectionItemsWithHttpInfo (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest);
        /// <summary>
        /// Burn collection item
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel BurnCollectionItem (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest);

        /// <summary>
        /// Burn collection item
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> BurnCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest);
        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <returns>CreateCollection200Response</returns>
        CreateCollection200Response CreateCollection (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest);

        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <returns>ApiResponse of CreateCollection200Response</returns>
        ApiResponse<CreateCollection200Response> CreateCollectionWithHttpInfo (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest);
        /// <summary>
        /// Create collection item
        /// </summary>
        /// <remarks>
        /// Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel CreateCollectionItem (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest);

        /// <summary>
        /// Create collection item
        /// </summary>
        /// <remarks>
        /// Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> CreateCollectionItemWithHttpInfo (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest);
        /// <summary>
        /// Get collection approval
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>bool</returns>
        bool GetCollectionApproval (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string));

        /// <summary>
        /// Get collection approval
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> GetCollectionApprovalWithHttpInfo (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string));
        /// <summary>
        /// Get collection item
        /// </summary>
        /// <remarks>
        /// Returns a metadata object for the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>List<Object></returns>
        List<Object> GetCollectionItem (string collectionId, decimal collectionItemId);

        /// <summary>
        /// Get collection item
        /// </summary>
        /// <remarks>
        /// Returns a metadata object for the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of List<Object></returns>
        ApiResponse<List<Object>> GetCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId);
        /// <summary>
        /// Get collection item balance
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>decimal</returns>
        decimal GetCollectionItemBalance (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string));

        /// <summary>
        /// Get collection item balance
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> GetCollectionItemBalanceWithHttpInfo (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string));
        /// <summary>
        /// Get collection item balances
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>Dictionary<string, decimal></returns>
        Dictionary<string, decimal> GetCollectionItemBalances (string collectionId, string address = default(string), string walletId = default(string));

        /// <summary>
        /// Get collection item balances
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of Dictionary<string, decimal></returns>
        ApiResponse<Dictionary<string, decimal>> GetCollectionItemBalancesWithHttpInfo (string collectionId, string address = default(string), string walletId = default(string));
        /// <summary>
        /// Get collection item supplies
        /// </summary>
        /// <remarks>
        /// Returns the currency circulating supply of all collection items.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>Dictionary<string, decimal></returns>
        Dictionary<string, decimal> GetCollectionItemSupplies (string collectionId);

        /// <summary>
        /// Get collection item supplies
        /// </summary>
        /// <remarks>
        /// Returns the currency circulating supply of all collection items.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of Dictionary<string, decimal></returns>
        ApiResponse<Dictionary<string, decimal>> GetCollectionItemSuppliesWithHttpInfo (string collectionId);
        /// <summary>
        /// Get collection item supply
        /// </summary>
        /// <remarks>
        /// Returns the current circulating supply of the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>decimal</returns>
        decimal GetCollectionItemSupply (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string));

        /// <summary>
        /// Get collection item supply
        /// </summary>
        /// <remarks>
        /// Returns the current circulating supply of the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> GetCollectionItemSupplyWithHttpInfo (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string));
        /// <summary>
        /// Get collection item timelock
        /// </summary>
        /// <remarks>
        /// Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>decimal</returns>
        decimal GetCollectionItemTimelock (string collectionId, decimal collectionItemId);

        /// <summary>
        /// Get collection item timelock
        /// </summary>
        /// <remarks>
        /// Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> GetCollectionItemTimelockWithHttpInfo (string collectionId, decimal collectionItemId);
        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>List<Object></returns>
        List<Object> GetCollectionItems (string collectionId);

        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<Object></returns>
        ApiResponse<List<Object>> GetCollectionItemsWithHttpInfo (string collectionId);
        /// <summary>
        /// Get collection role
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>bool</returns>
        bool GetCollectionRole (string collectionId, string role, string address = default(string), string walletId = default(string));

        /// <summary>
        /// Get collection role
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> GetCollectionRoleWithHttpInfo (string collectionId, string role, string address = default(string), string walletId = default(string));
        /// <summary>
        /// Get collections
        /// </summary>
        /// <remarks>
        /// Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetCollections200ResponseInner></returns>
        List<GetCollections200ResponseInner> GetCollections (string xGameKey);

        /// <summary>
        /// Get collections
        /// </summary>
        /// <remarks>
        /// Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetCollections200ResponseInner></returns>
        ApiResponse<List<GetCollections200ResponseInner>> GetCollectionsWithHttpInfo (string xGameKey);
        /// <summary>
        /// Grant collection role
        /// </summary>
        /// <remarks>
        /// Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel GrantCollectionRole (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest);

        /// <summary>
        /// Grant collection role
        /// </summary>
        /// <remarks>
        /// Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> GrantCollectionRoleWithHttpInfo (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest);
        /// <summary>
        /// Mint collection item
        /// </summary>
        /// <remarks>
        /// Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel MintCollectionItem (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest);

        /// <summary>
        /// Mint collection item
        /// </summary>
        /// <remarks>
        /// Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> MintCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest);
        /// <summary>
        /// Revoke collection role
        /// </summary>
        /// <remarks>
        /// Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel RevokeCollectionRole (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest);

        /// <summary>
        /// Revoke collection role
        /// </summary>
        /// <remarks>
        /// Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> RevokeCollectionRoleWithHttpInfo (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest);
        /// <summary>
        /// Set collection approval
        /// </summary>
        /// <remarks>
        /// Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel SetCollectionApproval (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest);

        /// <summary>
        /// Set collection approval
        /// </summary>
        /// <remarks>
        /// Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> SetCollectionApprovalWithHttpInfo (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest);
        /// <summary>
        /// Set collection item timelock
        /// </summary>
        /// <remarks>
        /// Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel SetCollectionItemTimelock (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest);

        /// <summary>
        /// Set collection item timelock
        /// </summary>
        /// <remarks>
        /// Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> SetCollectionItemTimelockWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest);
        /// <summary>
        /// Transfer collection item
        /// </summary>
        /// <remarks>
        /// Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel TransferCollectionItem (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest);

        /// <summary>
        /// Transfer collection item
        /// </summary>
        /// <remarks>
        /// Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> TransferCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Batch mint collection items
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> BatchMintCollectionItemsAsync (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Batch mint collection items
        /// </summary>
        /// <remarks>
        /// Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BatchMintCollectionItemsWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Batch transfer collection items
        /// </summary>
        /// <remarks>
        /// Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> BatchTransferCollectionItemsAsync (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Batch transfer collection items
        /// </summary>
        /// <remarks>
        /// Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BatchTransferCollectionItemsWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Burn collection item
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> BurnCollectionItemAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Burn collection item
        /// </summary>
        /// <remarks>
        /// Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BurnCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateCollection200Response</returns>
        System.Threading.Tasks.Task<CreateCollection200Response> CreateCollectionAsync (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create collection
        /// </summary>
        /// <remarks>
        /// Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateCollection200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCollection200Response>> CreateCollectionWithHttpInfoAsync (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create collection item
        /// </summary>
        /// <remarks>
        /// Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> CreateCollectionItemAsync (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create collection item
        /// </summary>
        /// <remarks>
        /// Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> CreateCollectionItemWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection approval
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> GetCollectionApprovalAsync (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection approval
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> GetCollectionApprovalWithHttpInfoAsync (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection item
        /// </summary>
        /// <remarks>
        /// Returns a metadata object for the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Object></returns>
        System.Threading.Tasks.Task<List<Object>> GetCollectionItemAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection item
        /// </summary>
        /// <remarks>
        /// Returns a metadata object for the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection item balance
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> GetCollectionItemBalanceAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection item balance
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> GetCollectionItemBalanceWithHttpInfoAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection item balances
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary<string, decimal></returns>
        System.Threading.Tasks.Task<Dictionary<string, decimal>> GetCollectionItemBalancesAsync (string collectionId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection item balances
        /// </summary>
        /// <remarks>
        /// Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, decimal>>> GetCollectionItemBalancesWithHttpInfoAsync (string collectionId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection item supplies
        /// </summary>
        /// <remarks>
        /// Returns the currency circulating supply of all collection items.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary<string, decimal></returns>
        System.Threading.Tasks.Task<Dictionary<string, decimal>> GetCollectionItemSuppliesAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection item supplies
        /// </summary>
        /// <remarks>
        /// Returns the currency circulating supply of all collection items.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, decimal>>> GetCollectionItemSuppliesWithHttpInfoAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection item supply
        /// </summary>
        /// <remarks>
        /// Returns the current circulating supply of the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> GetCollectionItemSupplyAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection item supply
        /// </summary>
        /// <remarks>
        /// Returns the current circulating supply of the provided collectionItemId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> GetCollectionItemSupplyWithHttpInfoAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection item timelock
        /// </summary>
        /// <remarks>
        /// Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> GetCollectionItemTimelockAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection item timelock
        /// </summary>
        /// <remarks>
        /// Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> GetCollectionItemTimelockWithHttpInfoAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Object></returns>
        System.Threading.Tasks.Task<List<Object>> GetCollectionItemsAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection items
        /// </summary>
        /// <remarks>
        /// Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCollectionItemsWithHttpInfoAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collection role
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> GetCollectionRoleAsync (string collectionId, string role, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collection role
        /// </summary>
        /// <remarks>
        /// Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> GetCollectionRoleWithHttpInfoAsync (string collectionId, string role, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get collections
        /// </summary>
        /// <remarks>
        /// Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetCollections200ResponseInner></returns>
        System.Threading.Tasks.Task<List<GetCollections200ResponseInner>> GetCollectionsAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get collections
        /// </summary>
        /// <remarks>
        /// Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetCollections200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetCollections200ResponseInner>>> GetCollectionsWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Grant collection role
        /// </summary>
        /// <remarks>
        /// Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> GrantCollectionRoleAsync (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Grant collection role
        /// </summary>
        /// <remarks>
        /// Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> GrantCollectionRoleWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mint collection item
        /// </summary>
        /// <remarks>
        /// Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> MintCollectionItemAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mint collection item
        /// </summary>
        /// <remarks>
        /// Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> MintCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Revoke collection role
        /// </summary>
        /// <remarks>
        /// Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> RevokeCollectionRoleAsync (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revoke collection role
        /// </summary>
        /// <remarks>
        /// Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RevokeCollectionRoleWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set collection approval
        /// </summary>
        /// <remarks>
        /// Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> SetCollectionApprovalAsync (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set collection approval
        /// </summary>
        /// <remarks>
        /// Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetCollectionApprovalWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set collection item timelock
        /// </summary>
        /// <remarks>
        /// Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> SetCollectionItemTimelockAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set collection item timelock
        /// </summary>
        /// <remarks>
        /// Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetCollectionItemTimelockWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transfer collection item
        /// </summary>
        /// <remarks>
        /// Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> TransferCollectionItemAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Transfer collection item
        /// </summary>
        /// <remarks>
        /// Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> TransferCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ItemsApi : IItemsApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ItemsApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ItemsApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ItemsApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel BatchMintCollectionItems (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = BatchMintCollectionItemsWithHttpInfo(collectionId, xAuthorization, xPassword, batchMintCollectionItemsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> BatchMintCollectionItemsWithHttpInfo (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->BatchMintCollectionItems");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->BatchMintCollectionItems");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->BatchMintCollectionItems");
            // verify the required parameter 'batchMintCollectionItemsRequest' is set
            if (batchMintCollectionItemsRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchMintCollectionItemsRequest' when calling ItemsApi->BatchMintCollectionItems");

            var localVarPath = "/v1/collections/{collectionId}/batchMints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (batchMintCollectionItemsRequest != null && batchMintCollectionItemsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchMintCollectionItemsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchMintCollectionItemsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchMintCollectionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> BatchMintCollectionItemsAsync (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await BatchMintCollectionItemsWithHttpInfoAsync(collectionId, xAuthorization, xPassword, batchMintCollectionItemsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch mint collection items Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="batchMintCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BatchMintCollectionItemsWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, BatchMintCollectionItemsRequest batchMintCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->BatchMintCollectionItems");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->BatchMintCollectionItems");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->BatchMintCollectionItems");
            // verify the required parameter 'batchMintCollectionItemsRequest' is set
            if (batchMintCollectionItemsRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchMintCollectionItemsRequest' when calling ItemsApi->BatchMintCollectionItems");

            var localVarPath = "/v1/collections/{collectionId}/batchMints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (batchMintCollectionItemsRequest != null && batchMintCollectionItemsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchMintCollectionItemsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchMintCollectionItemsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchMintCollectionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel BatchTransferCollectionItems (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = BatchTransferCollectionItemsWithHttpInfo(collectionId, xAuthorization, xPassword, batchTransferCollectionItemsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> BatchTransferCollectionItemsWithHttpInfo (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->BatchTransferCollectionItems");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->BatchTransferCollectionItems");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->BatchTransferCollectionItems");
            // verify the required parameter 'batchTransferCollectionItemsRequest' is set
            if (batchTransferCollectionItemsRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchTransferCollectionItemsRequest' when calling ItemsApi->BatchTransferCollectionItems");

            var localVarPath = "/v1/collections/{collectionId}/batchTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (batchTransferCollectionItemsRequest != null && batchTransferCollectionItemsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchTransferCollectionItemsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchTransferCollectionItemsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchTransferCollectionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> BatchTransferCollectionItemsAsync (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await BatchTransferCollectionItemsWithHttpInfoAsync(collectionId, xAuthorization, xPassword, batchTransferCollectionItemsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Batch transfer collection items Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="batchTransferCollectionItemsRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BatchTransferCollectionItemsWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, BatchTransferCollectionItemsRequest batchTransferCollectionItemsRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->BatchTransferCollectionItems");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->BatchTransferCollectionItems");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->BatchTransferCollectionItems");
            // verify the required parameter 'batchTransferCollectionItemsRequest' is set
            if (batchTransferCollectionItemsRequest == null)
                throw new ApiException(400, "Missing required parameter 'batchTransferCollectionItemsRequest' when calling ItemsApi->BatchTransferCollectionItems");

            var localVarPath = "/v1/collections/{collectionId}/batchTransfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (batchTransferCollectionItemsRequest != null && batchTransferCollectionItemsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(batchTransferCollectionItemsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = batchTransferCollectionItemsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchTransferCollectionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel BurnCollectionItem (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = BurnCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, burnCollectionItemRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> BurnCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'burnCollectionItemRequest' is set
            if (burnCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'burnCollectionItemRequest' when calling ItemsApi->BurnCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/burns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (burnCollectionItemRequest != null && burnCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burnCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burnCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BurnCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> BurnCollectionItemAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await BurnCollectionItemWithHttpInfoAsync(collectionId, collectionItemId, xAuthorization, xPassword, burnCollectionItemRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Burn collection item Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="burnCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> BurnCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, BurnCollectionItemRequest burnCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->BurnCollectionItem");
            // verify the required parameter 'burnCollectionItemRequest' is set
            if (burnCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'burnCollectionItemRequest' when calling ItemsApi->BurnCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/burns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (burnCollectionItemRequest != null && burnCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(burnCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = burnCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BurnCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <returns>CreateCollection200Response</returns>
        public CreateCollection200Response CreateCollection (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest)
        {
             ApiResponse<CreateCollection200Response> localVarResponse = CreateCollectionWithHttpInfo(xAuthorization, xPassword, createCollectionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <returns>ApiResponse of CreateCollection200Response</returns>
        public ApiResponse<CreateCollection200Response> CreateCollectionWithHttpInfo (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->CreateCollection");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->CreateCollection");
            // verify the required parameter 'createCollectionRequest' is set
            if (createCollectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCollectionRequest' when calling ItemsApi->CreateCollection");

            var localVarPath = "/v1/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createCollectionRequest != null && createCollectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCollectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCollectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCollection200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateCollection200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCollection200Response)));
        }

        /// <summary>
        /// Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateCollection200Response</returns>
        public async System.Threading.Tasks.Task<CreateCollection200Response> CreateCollectionAsync (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateCollection200Response> localVarResponse = await CreateCollectionWithHttpInfoAsync(xAuthorization, xPassword, createCollectionRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create collection Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateCollection200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateCollection200Response>> CreateCollectionWithHttpInfoAsync (string xAuthorization, string xPassword, CreateCollectionRequest createCollectionRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->CreateCollection");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->CreateCollection");
            // verify the required parameter 'createCollectionRequest' is set
            if (createCollectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCollectionRequest' when calling ItemsApi->CreateCollection");

            var localVarPath = "/v1/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createCollectionRequest != null && createCollectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCollectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCollectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateCollection200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateCollection200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateCollection200Response)));
        }

        /// <summary>
        /// Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel CreateCollectionItem (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = CreateCollectionItemWithHttpInfo(collectionId, xAuthorization, xPassword, createCollectionItemRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> CreateCollectionItemWithHttpInfo (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->CreateCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->CreateCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->CreateCollectionItem");
            // verify the required parameter 'createCollectionItemRequest' is set
            if (createCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCollectionItemRequest' when calling ItemsApi->CreateCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createCollectionItemRequest != null && createCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> CreateCollectionItemAsync (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await CreateCollectionItemWithHttpInfoAsync(collectionId, xAuthorization, xPassword, createCollectionItemRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create collection item Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> CreateCollectionItemWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, CreateCollectionItemRequest createCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->CreateCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->CreateCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->CreateCollectionItem");
            // verify the required parameter 'createCollectionItemRequest' is set
            if (createCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'createCollectionItemRequest' when calling ItemsApi->CreateCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createCollectionItemRequest != null && createCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>bool</returns>
        public bool GetCollectionApproval (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string))
        {
             ApiResponse<bool> localVarResponse = GetCollectionApprovalWithHttpInfo(collectionId, operatorAddress, address, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> GetCollectionApprovalWithHttpInfo (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionApproval");
            // verify the required parameter 'operatorAddress' is set
            if (operatorAddress == null)
                throw new ApiException(400, "Missing required parameter 'operatorAddress' when calling ItemsApi->GetCollectionApproval");

            var localVarPath = "/v1/collections/{collectionId}/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (operatorAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operatorAddress", operatorAddress)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> GetCollectionApprovalAsync (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<bool> localVarResponse = await GetCollectionApprovalWithHttpInfoAsync(collectionId, operatorAddress, address, walletId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection approval Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="operatorAddress">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> GetCollectionApprovalWithHttpInfoAsync (string collectionId, string operatorAddress, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionApproval");
            // verify the required parameter 'operatorAddress' is set
            if (operatorAddress == null)
                throw new ApiException(400, "Missing required parameter 'operatorAddress' when calling ItemsApi->GetCollectionApproval");

            var localVarPath = "/v1/collections/{collectionId}/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (operatorAddress != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operatorAddress", operatorAddress)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Get collection item Returns a metadata object for the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>List<Object></returns>
        public List<Object> GetCollectionItem (string collectionId, decimal collectionItemId)
        {
             ApiResponse<List<Object>> localVarResponse = GetCollectionItemWithHttpInfo(collectionId, collectionItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection item Returns a metadata object for the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of List<Object></returns>
        public ApiResponse<List<Object>> GetCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get collection item Returns a metadata object for the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Object></returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCollectionItemAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Object>> localVarResponse = await GetCollectionItemWithHttpInfoAsync(collectionId, collectionItemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection item Returns a metadata object for the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>decimal</returns>
        public decimal GetCollectionItemBalance (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string))
        {
             ApiResponse<decimal> localVarResponse = GetCollectionItemBalanceWithHttpInfo(collectionId, collectionItemId, address, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        public ApiResponse<decimal> GetCollectionItemBalanceWithHttpInfo (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemBalance");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItemBalance");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> GetCollectionItemBalanceAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<decimal> localVarResponse = await GetCollectionItemBalanceWithHttpInfoAsync(collectionId, collectionItemId, address, walletId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection item balance Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal>> GetCollectionItemBalanceWithHttpInfoAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemBalance");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItemBalance");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get collection item balances Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>Dictionary<string, decimal></returns>
        public Dictionary<string, decimal> GetCollectionItemBalances (string collectionId, string address = default(string), string walletId = default(string))
        {
             ApiResponse<Dictionary<string, decimal>> localVarResponse = GetCollectionItemBalancesWithHttpInfo(collectionId, address, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection item balances Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of Dictionary<string, decimal></returns>
        public ApiResponse<Dictionary<string, decimal>> GetCollectionItemBalancesWithHttpInfo (string collectionId, string address = default(string), string walletId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemBalances");

            var localVarPath = "/v1/collections/{collectionId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, decimal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, decimal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, decimal>)));
        }

        /// <summary>
        /// Get collection item balances Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary<string, decimal></returns>
        public async System.Threading.Tasks.Task<Dictionary<string, decimal>> GetCollectionItemBalancesAsync (string collectionId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, decimal>> localVarResponse = await GetCollectionItemBalancesWithHttpInfoAsync(collectionId, address, walletId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection item balances Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, decimal>>> GetCollectionItemBalancesWithHttpInfoAsync (string collectionId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemBalances");

            var localVarPath = "/v1/collections/{collectionId}/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemBalances", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, decimal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, decimal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, decimal>)));
        }

        /// <summary>
        /// Get collection item supplies Returns the currency circulating supply of all collection items.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>Dictionary<string, decimal></returns>
        public Dictionary<string, decimal> GetCollectionItemSupplies (string collectionId)
        {
             ApiResponse<Dictionary<string, decimal>> localVarResponse = GetCollectionItemSuppliesWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection item supplies Returns the currency circulating supply of all collection items.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of Dictionary<string, decimal></returns>
        public ApiResponse<Dictionary<string, decimal>> GetCollectionItemSuppliesWithHttpInfo (string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemSupplies");

            var localVarPath = "/v1/collections/{collectionId}/supplies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemSupplies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, decimal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, decimal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, decimal>)));
        }

        /// <summary>
        /// Get collection item supplies Returns the currency circulating supply of all collection items.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Dictionary<string, decimal></returns>
        public async System.Threading.Tasks.Task<Dictionary<string, decimal>> GetCollectionItemSuppliesAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Dictionary<string, decimal>> localVarResponse = await GetCollectionItemSuppliesWithHttpInfoAsync(collectionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection item supplies Returns the currency circulating supply of all collection items.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, decimal&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, decimal>>> GetCollectionItemSuppliesWithHttpInfoAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemSupplies");

            var localVarPath = "/v1/collections/{collectionId}/supplies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemSupplies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, decimal>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, decimal>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, decimal>)));
        }

        /// <summary>
        /// Get collection item supply Returns the current circulating supply of the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>decimal</returns>
        public decimal GetCollectionItemSupply (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string))
        {
             ApiResponse<decimal> localVarResponse = GetCollectionItemSupplyWithHttpInfo(collectionId, collectionItemId, address, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection item supply Returns the current circulating supply of the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of decimal</returns>
        public ApiResponse<decimal> GetCollectionItemSupplyWithHttpInfo (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemSupply");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItemSupply");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/supplies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get collection item supply Returns the current circulating supply of the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> GetCollectionItemSupplyAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<decimal> localVarResponse = await GetCollectionItemSupplyWithHttpInfoAsync(collectionId, collectionItemId, address, walletId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection item supply Returns the current circulating supply of the provided collectionItemId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal>> GetCollectionItemSupplyWithHttpInfoAsync (string collectionId, decimal collectionItemId, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemSupply");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItemSupply");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/supplies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>decimal</returns>
        public decimal GetCollectionItemTimelock (string collectionId, decimal collectionItemId)
        {
             ApiResponse<decimal> localVarResponse = GetCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of decimal</returns>
        public ApiResponse<decimal> GetCollectionItemTimelockWithHttpInfo (string collectionId, decimal collectionItemId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemTimelock");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItemTimelock");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemTimelock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> GetCollectionItemTimelockAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<decimal> localVarResponse = await GetCollectionItemTimelockWithHttpInfoAsync(collectionId, collectionItemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection item timelock Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal>> GetCollectionItemTimelockWithHttpInfoAsync (string collectionId, decimal collectionItemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItemTimelock");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->GetCollectionItemTimelock");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItemTimelock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (decimal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal)));
        }

        /// <summary>
        /// Get collection items Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>List<Object></returns>
        public List<Object> GetCollectionItems (string collectionId)
        {
             ApiResponse<List<Object>> localVarResponse = GetCollectionItemsWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection items Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<Object></returns>
        public ApiResponse<List<Object>> GetCollectionItemsWithHttpInfo (string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItems");

            var localVarPath = "/v1/collections/{collectionId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get collection items Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Object></returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCollectionItemsAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Object>> localVarResponse = await GetCollectionItemsWithHttpInfoAsync(collectionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection items Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCollectionItemsWithHttpInfoAsync (string collectionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionItems");

            var localVarPath = "/v1/collections/{collectionId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>bool</returns>
        public bool GetCollectionRole (string collectionId, string role, string address = default(string), string walletId = default(string))
        {
             ApiResponse<bool> localVarResponse = GetCollectionRoleWithHttpInfo(collectionId, role, address, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> GetCollectionRoleWithHttpInfo (string collectionId, string role, string address = default(string), string walletId = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionRole");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling ItemsApi->GetCollectionRole");

            var localVarPath = "/v1/collections/{collectionId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> GetCollectionRoleAsync (string collectionId, string role, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<bool> localVarResponse = await GetCollectionRoleWithHttpInfoAsync(collectionId, role, address, walletId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection role Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</param>
        /// <param name="address">A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)</param>
        /// <param name="walletId">Any wallet id within the MetaFab ecosystem. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> GetCollectionRoleWithHttpInfoAsync (string collectionId, string role, string address = default(string), string walletId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GetCollectionRole");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling ItemsApi->GetCollectionRole");

            var localVarPath = "/v1/collections/{collectionId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (role != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "role", role)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectionRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (bool) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        /// Get collections Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetCollections200ResponseInner></returns>
        public List<GetCollections200ResponseInner> GetCollections (string xGameKey)
        {
             ApiResponse<List<GetCollections200ResponseInner>> localVarResponse = GetCollectionsWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collections Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetCollections200ResponseInner></returns>
        public ApiResponse<List<GetCollections200ResponseInner>> GetCollectionsWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ItemsApi->GetCollections");

            var localVarPath = "/v1/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCollections200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetCollections200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCollections200ResponseInner>)));
        }

        /// <summary>
        /// Get collections Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetCollections200ResponseInner></returns>
        public async System.Threading.Tasks.Task<List<GetCollections200ResponseInner>> GetCollectionsAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GetCollections200ResponseInner>> localVarResponse = await GetCollectionsWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collections Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetCollections200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetCollections200ResponseInner>>> GetCollectionsWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ItemsApi->GetCollections");

            var localVarPath = "/v1/collections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetCollections200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetCollections200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetCollections200ResponseInner>)));
        }

        /// <summary>
        /// Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel GrantCollectionRole (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = GrantCollectionRoleWithHttpInfo(collectionId, xAuthorization, xPassword, grantCollectionRoleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> GrantCollectionRoleWithHttpInfo (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GrantCollectionRole");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->GrantCollectionRole");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->GrantCollectionRole");
            // verify the required parameter 'grantCollectionRoleRequest' is set
            if (grantCollectionRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'grantCollectionRoleRequest' when calling ItemsApi->GrantCollectionRole");

            var localVarPath = "/v1/collections/{collectionId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (grantCollectionRoleRequest != null && grantCollectionRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(grantCollectionRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantCollectionRoleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantCollectionRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> GrantCollectionRoleAsync (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await GrantCollectionRoleWithHttpInfoAsync(collectionId, xAuthorization, xPassword, grantCollectionRoleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Grant collection role Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="grantCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> GrantCollectionRoleWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, GrantCollectionRoleRequest grantCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->GrantCollectionRole");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->GrantCollectionRole");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->GrantCollectionRole");
            // verify the required parameter 'grantCollectionRoleRequest' is set
            if (grantCollectionRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'grantCollectionRoleRequest' when calling ItemsApi->GrantCollectionRole");

            var localVarPath = "/v1/collections/{collectionId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (grantCollectionRoleRequest != null && grantCollectionRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(grantCollectionRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = grantCollectionRoleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GrantCollectionRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel MintCollectionItem (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = MintCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, mintCollectionItemRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> MintCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'mintCollectionItemRequest' is set
            if (mintCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'mintCollectionItemRequest' when calling ItemsApi->MintCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/mints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (mintCollectionItemRequest != null && mintCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mintCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mintCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MintCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> MintCollectionItemAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await MintCollectionItemWithHttpInfoAsync(collectionId, collectionItemId, xAuthorization, xPassword, mintCollectionItemRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mint collection item Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="mintCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> MintCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, MintCollectionItemRequest mintCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->MintCollectionItem");
            // verify the required parameter 'mintCollectionItemRequest' is set
            if (mintCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'mintCollectionItemRequest' when calling ItemsApi->MintCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/mints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (mintCollectionItemRequest != null && mintCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mintCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mintCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MintCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel RevokeCollectionRole (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = RevokeCollectionRoleWithHttpInfo(collectionId, xAuthorization, xPassword, revokeCollectionRoleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> RevokeCollectionRoleWithHttpInfo (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->RevokeCollectionRole");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->RevokeCollectionRole");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->RevokeCollectionRole");
            // verify the required parameter 'revokeCollectionRoleRequest' is set
            if (revokeCollectionRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'revokeCollectionRoleRequest' when calling ItemsApi->RevokeCollectionRole");

            var localVarPath = "/v1/collections/{collectionId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (revokeCollectionRoleRequest != null && revokeCollectionRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(revokeCollectionRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = revokeCollectionRoleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeCollectionRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> RevokeCollectionRoleAsync (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await RevokeCollectionRoleWithHttpInfoAsync(collectionId, xAuthorization, xPassword, revokeCollectionRoleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke collection role Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="revokeCollectionRoleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RevokeCollectionRoleWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, RevokeCollectionRoleRequest revokeCollectionRoleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->RevokeCollectionRole");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->RevokeCollectionRole");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->RevokeCollectionRole");
            // verify the required parameter 'revokeCollectionRoleRequest' is set
            if (revokeCollectionRoleRequest == null)
                throw new ApiException(400, "Missing required parameter 'revokeCollectionRoleRequest' when calling ItemsApi->RevokeCollectionRole");

            var localVarPath = "/v1/collections/{collectionId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (revokeCollectionRoleRequest != null && revokeCollectionRoleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(revokeCollectionRoleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = revokeCollectionRoleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeCollectionRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel SetCollectionApproval (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = SetCollectionApprovalWithHttpInfo(collectionId, xAuthorization, xPassword, setCollectionApprovalRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> SetCollectionApprovalWithHttpInfo (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->SetCollectionApproval");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->SetCollectionApproval");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->SetCollectionApproval");
            // verify the required parameter 'setCollectionApprovalRequest' is set
            if (setCollectionApprovalRequest == null)
                throw new ApiException(400, "Missing required parameter 'setCollectionApprovalRequest' when calling ItemsApi->SetCollectionApproval");

            var localVarPath = "/v1/collections/{collectionId}/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setCollectionApprovalRequest != null && setCollectionApprovalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setCollectionApprovalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setCollectionApprovalRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCollectionApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> SetCollectionApprovalAsync (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await SetCollectionApprovalWithHttpInfoAsync(collectionId, xAuthorization, xPassword, setCollectionApprovalRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set collection approval Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="setCollectionApprovalRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetCollectionApprovalWithHttpInfoAsync (string collectionId, string xAuthorization, string xPassword, SetCollectionApprovalRequest setCollectionApprovalRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->SetCollectionApproval");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->SetCollectionApproval");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->SetCollectionApproval");
            // verify the required parameter 'setCollectionApprovalRequest' is set
            if (setCollectionApprovalRequest == null)
                throw new ApiException(400, "Missing required parameter 'setCollectionApprovalRequest' when calling ItemsApi->SetCollectionApproval");

            var localVarPath = "/v1/collections/{collectionId}/approvals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setCollectionApprovalRequest != null && setCollectionApprovalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setCollectionApprovalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setCollectionApprovalRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCollectionApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel SetCollectionItemTimelock (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = SetCollectionItemTimelockWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, setCollectionItemTimelockRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> SetCollectionItemTimelockWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'setCollectionItemTimelockRequest' is set
            if (setCollectionItemTimelockRequest == null)
                throw new ApiException(400, "Missing required parameter 'setCollectionItemTimelockRequest' when calling ItemsApi->SetCollectionItemTimelock");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setCollectionItemTimelockRequest != null && setCollectionItemTimelockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setCollectionItemTimelockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setCollectionItemTimelockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCollectionItemTimelock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> SetCollectionItemTimelockAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await SetCollectionItemTimelockWithHttpInfoAsync(collectionId, collectionItemId, xAuthorization, xPassword, setCollectionItemTimelockRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set collection item timelock Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setCollectionItemTimelockRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetCollectionItemTimelockWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, SetCollectionItemTimelockRequest setCollectionItemTimelockRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->SetCollectionItemTimelock");
            // verify the required parameter 'setCollectionItemTimelockRequest' is set
            if (setCollectionItemTimelockRequest == null)
                throw new ApiException(400, "Missing required parameter 'setCollectionItemTimelockRequest' when calling ItemsApi->SetCollectionItemTimelock");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setCollectionItemTimelockRequest != null && setCollectionItemTimelockRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setCollectionItemTimelockRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setCollectionItemTimelockRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetCollectionItemTimelock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel TransferCollectionItem (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = TransferCollectionItemWithHttpInfo(collectionId, collectionItemId, xAuthorization, xPassword, transferCollectionItemRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> TransferCollectionItemWithHttpInfo (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'transferCollectionItemRequest' is set
            if (transferCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferCollectionItemRequest' when calling ItemsApi->TransferCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (transferCollectionItemRequest != null && transferCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> TransferCollectionItemAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await TransferCollectionItemWithHttpInfoAsync(collectionId, collectionItemId, xAuthorization, xPassword, transferCollectionItemRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer collection item Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">Any collection id within the MetaFab ecosystem.</param>
        /// <param name="collectionItemId">Any item id for the collection. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="transferCollectionItemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> TransferCollectionItemWithHttpInfoAsync (string collectionId, decimal collectionItemId, string xAuthorization, string xPassword, TransferCollectionItemRequest transferCollectionItemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new ApiException(400, "Missing required parameter 'collectionId' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'collectionItemId' is set
            if (collectionItemId == null)
                throw new ApiException(400, "Missing required parameter 'collectionItemId' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ItemsApi->TransferCollectionItem");
            // verify the required parameter 'transferCollectionItemRequest' is set
            if (transferCollectionItemRequest == null)
                throw new ApiException(400, "Missing required parameter 'transferCollectionItemRequest' when calling ItemsApi->TransferCollectionItem");

            var localVarPath = "/v1/collections/{collectionId}/items/{collectionItemId}/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionId != null) localVarPathParams.Add("collectionId", this.Configuration.ApiClient.ParameterToString(collectionId)); // path parameter
            if (collectionItemId != null) localVarPathParams.Add("collectionItemId", this.Configuration.ApiClient.ParameterToString(collectionItemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (transferCollectionItemRequest != null && transferCollectionItemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transferCollectionItemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transferCollectionItemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCollectionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

    }
}

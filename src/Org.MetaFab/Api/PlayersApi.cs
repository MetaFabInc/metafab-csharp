/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authenticate player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>AuthPlayer200Response</returns>
        AuthPlayer200Response AuthPlayer (string xGameKey);

        /// <summary>
        /// Authenticate player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        ApiResponse<AuthPlayer200Response> AuthPlayerWithHttpInfo (string xGameKey);
        /// <summary>
        /// Create player
        /// </summary>
        /// <remarks>
        /// Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <returns>AuthPlayer200Response</returns>
        AuthPlayer200Response CreatePlayer (string xGameKey, CreatePlayerRequest createPlayerRequest);

        /// <summary>
        /// Create player
        /// </summary>
        /// <remarks>
        /// Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        ApiResponse<AuthPlayer200Response> CreatePlayerWithHttpInfo (string xGameKey, CreatePlayerRequest createPlayerRequest);
        /// <summary>
        /// Update player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <returns>PlayerModel</returns>
        PlayerModel UpdatePlayer (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest);

        /// <summary>
        /// Update player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <returns>ApiResponse of PlayerModel</returns>
        ApiResponse<PlayerModel> UpdatePlayerWithHttpInfo (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Authenticate player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        System.Threading.Tasks.Task<AuthPlayer200Response> AuthPlayerAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticate player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> AuthPlayerWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create player
        /// </summary>
        /// <remarks>
        /// Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        System.Threading.Tasks.Task<AuthPlayer200Response> CreatePlayerAsync (string xGameKey, CreatePlayerRequest createPlayerRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create player
        /// </summary>
        /// <remarks>
        /// Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> CreatePlayerWithHttpInfoAsync (string xGameKey, CreatePlayerRequest createPlayerRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlayerModel</returns>
        System.Threading.Tasks.Task<PlayerModel> UpdatePlayerAsync (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlayerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerModel>> UpdatePlayerWithHttpInfoAsync (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayersApi : IPlayersApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlayersApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayersApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>AuthPlayer200Response</returns>
        public AuthPlayer200Response AuthPlayer (string xGameKey)
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = AuthPlayerWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        public ApiResponse<AuthPlayer200Response> AuthPlayerWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling PlayersApi->AuthPlayer");

            var localVarPath = "/v1/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        public async System.Threading.Tasks.Task<AuthPlayer200Response> AuthPlayerAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = await AuthPlayerWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate player Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> AuthPlayerWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling PlayersApi->AuthPlayer");

            var localVarPath = "/v1/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <returns>AuthPlayer200Response</returns>
        public AuthPlayer200Response CreatePlayer (string xGameKey, CreatePlayerRequest createPlayerRequest)
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = CreatePlayerWithHttpInfo(xGameKey, createPlayerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        public ApiResponse<AuthPlayer200Response> CreatePlayerWithHttpInfo (string xGameKey, CreatePlayerRequest createPlayerRequest)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling PlayersApi->CreatePlayer");
            // verify the required parameter 'createPlayerRequest' is set
            if (createPlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'createPlayerRequest' when calling PlayersApi->CreatePlayer");

            var localVarPath = "/v1/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter
            if (createPlayerRequest != null && createPlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        public async System.Threading.Tasks.Task<AuthPlayer200Response> CreatePlayerAsync (string xGameKey, CreatePlayerRequest createPlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = await CreatePlayerWithHttpInfoAsync(xGameKey, createPlayerRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create player Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="createPlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> CreatePlayerWithHttpInfoAsync (string xGameKey, CreatePlayerRequest createPlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling PlayersApi->CreatePlayer");
            // verify the required parameter 'createPlayerRequest' is set
            if (createPlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'createPlayerRequest' when calling PlayersApi->CreatePlayer");

            var localVarPath = "/v1/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter
            if (createPlayerRequest != null && createPlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <returns>PlayerModel</returns>
        public PlayerModel UpdatePlayer (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest)
        {
             ApiResponse<PlayerModel> localVarResponse = UpdatePlayerWithHttpInfo(playerId, xAuthorization, updatePlayerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <returns>ApiResponse of PlayerModel</returns>
        public ApiResponse<PlayerModel> UpdatePlayerWithHttpInfo (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->UpdatePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PlayersApi->UpdatePlayer");
            // verify the required parameter 'updatePlayerRequest' is set
            if (updatePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePlayerRequest' when calling PlayersApi->UpdatePlayer");

            var localVarPath = "/v1/players/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarPathParams.Add("playerId", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updatePlayerRequest != null && updatePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlayerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerModel)));
        }

        /// <summary>
        /// Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PlayerModel</returns>
        public async System.Threading.Tasks.Task<PlayerModel> UpdatePlayerAsync (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PlayerModel> localVarResponse = await UpdatePlayerWithHttpInfoAsync(playerId, xAuthorization, updatePlayerRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update player Update various fields specific to a player. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Any player id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating player.</param>
        /// <param name="updatePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PlayerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlayerModel>> UpdatePlayerWithHttpInfoAsync (string playerId, string xAuthorization, UpdatePlayerRequest updatePlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayersApi->UpdatePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PlayersApi->UpdatePlayer");
            // verify the required parameter 'updatePlayerRequest' is set
            if (updatePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePlayerRequest' when calling PlayersApi->UpdatePlayer");

            var localVarPath = "/v1/players/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarPathParams.Add("playerId", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updatePlayerRequest != null && updatePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PlayerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerModel)));
        }

    }
}

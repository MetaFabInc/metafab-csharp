/*
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEcosystemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Approve ecosystem game
        /// </summary>
        /// <remarks>
        /// Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <returns></returns>
        void ApproveEcosystemGame (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest);

        /// <summary>
        /// Approve ecosystem game
        /// </summary>
        /// <remarks>
        /// Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApproveEcosystemGameWithHttpInfo (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest);
        /// <summary>
        /// Authenticate ecosystem
        /// </summary>
        /// <remarks>
        /// Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EcosystemModel</returns>
        EcosystemModel AuthEcosystem ();

        /// <summary>
        /// Authenticate ecosystem
        /// </summary>
        /// <remarks>
        /// Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EcosystemModel</returns>
        ApiResponse<EcosystemModel> AuthEcosystemWithHttpInfo ();
        /// <summary>
        /// Authenticate profile
        /// </summary>
        /// <remarks>
        /// Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <returns>AuthProfile200Response</returns>
        AuthProfile200Response AuthProfile (string xEcosystemKey);

        /// <summary>
        /// Authenticate profile
        /// </summary>
        /// <remarks>
        /// Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <returns>ApiResponse of AuthProfile200Response</returns>
        ApiResponse<AuthProfile200Response> AuthProfileWithHttpInfo (string xEcosystemKey);
        /// <summary>
        /// Authenticate profile player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <returns>AuthPlayer200Response</returns>
        AuthPlayer200Response AuthProfilePlayer (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername);

        /// <summary>
        /// Authenticate profile player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        ApiResponse<AuthPlayer200Response> AuthProfilePlayerWithHttpInfo (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername);
        /// <summary>
        /// Create ecosystem
        /// </summary>
        /// <remarks>
        /// Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <returns>EcosystemModel</returns>
        EcosystemModel CreateEcosystem (CreateEcosystemRequest createEcosystemRequest);

        /// <summary>
        /// Create ecosystem
        /// </summary>
        /// <remarks>
        /// Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <returns>ApiResponse of EcosystemModel</returns>
        ApiResponse<EcosystemModel> CreateEcosystemWithHttpInfo (CreateEcosystemRequest createEcosystemRequest);
        /// <summary>
        /// Create profile
        /// </summary>
        /// <remarks>
        /// Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <returns>AuthProfile200Response</returns>
        AuthProfile200Response CreateProfile (string xEcosystemKey, CreateProfileRequest createProfileRequest);

        /// <summary>
        /// Create profile
        /// </summary>
        /// <remarks>
        /// Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <returns>ApiResponse of AuthProfile200Response</returns>
        ApiResponse<AuthProfile200Response> CreateProfileWithHttpInfo (string xEcosystemKey, CreateProfileRequest createProfileRequest);
        /// <summary>
        /// Create profile player
        /// </summary>
        /// <remarks>
        /// Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <returns>AuthPlayer200Response</returns>
        AuthPlayer200Response CreateProfilePlayer (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest);

        /// <summary>
        /// Create profile player
        /// </summary>
        /// <remarks>
        /// Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        ApiResponse<AuthPlayer200Response> CreateProfilePlayerWithHttpInfo (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest);
        /// <summary>
        /// Get ecosystem
        /// </summary>
        /// <remarks>
        /// Returns a ecosystem object for the provided ecosystem id.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>PublicEcosystem</returns>
        PublicEcosystem GetEcosystem (string ecosystemId);

        /// <summary>
        /// Get ecosystem
        /// </summary>
        /// <remarks>
        /// Returns a ecosystem object for the provided ecosystem id.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>ApiResponse of PublicEcosystem</returns>
        ApiResponse<PublicEcosystem> GetEcosystemWithHttpInfo (string ecosystemId);
        /// <summary>
        /// Get ecosystem game
        /// </summary>
        /// <remarks>
        /// Returns a game object for the provided game id that the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <returns>PublicGame</returns>
        PublicGame GetEcosystemGame (string ecosystemId, string gameId);

        /// <summary>
        /// Get ecosystem game
        /// </summary>
        /// <remarks>
        /// Returns a game object for the provided game id that the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <returns>ApiResponse of PublicGame</returns>
        ApiResponse<PublicGame> GetEcosystemGameWithHttpInfo (string ecosystemId, string gameId);
        /// <summary>
        /// Get ecosystem games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>List<PublicGame></returns>
        List<PublicGame> GetEcosystemGames (string ecosystemId);

        /// <summary>
        /// Get ecosystem games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>ApiResponse of List<PublicGame></returns>
        ApiResponse<List<PublicGame>> GetEcosystemGamesWithHttpInfo (string ecosystemId);
        /// <summary>
        /// Get profile game
        /// </summary>
        /// <remarks>
        /// Returns a game this profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>GetProfileGames200ResponseInner</returns>
        GetProfileGames200ResponseInner GetProfileGame (string profileId, string gameId, string xAuthorization);

        /// <summary>
        /// Get profile game
        /// </summary>
        /// <remarks>
        /// Returns a game this profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>ApiResponse of GetProfileGames200ResponseInner</returns>
        ApiResponse<GetProfileGames200ResponseInner> GetProfileGameWithHttpInfo (string profileId, string gameId, string xAuthorization);
        /// <summary>
        /// Get profile games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the authorized profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>List<GetProfileGames200ResponseInner></returns>
        List<GetProfileGames200ResponseInner> GetProfileGames (string profileId, string xAuthorization);

        /// <summary>
        /// Get profile games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the authorized profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>ApiResponse of List<GetProfileGames200ResponseInner></returns>
        ApiResponse<List<GetProfileGames200ResponseInner>> GetProfileGamesWithHttpInfo (string profileId, string xAuthorization);
        /// <summary>
        /// Unapprove ecosystem game
        /// </summary>
        /// <remarks>
        /// Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <returns></returns>
        void UnapproveEcosystemGame (string ecosystemId, string gameId, string xAuthorization);

        /// <summary>
        /// Unapprove ecosystem game
        /// </summary>
        /// <remarks>
        /// Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnapproveEcosystemGameWithHttpInfo (string ecosystemId, string gameId, string xAuthorization);
        /// <summary>
        /// Update ecosystem
        /// </summary>
        /// <remarks>
        /// Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <returns>EcosystemModel</returns>
        EcosystemModel UpdateEcosystem (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest);

        /// <summary>
        /// Update ecosystem
        /// </summary>
        /// <remarks>
        /// Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <returns>ApiResponse of EcosystemModel</returns>
        ApiResponse<EcosystemModel> UpdateEcosystemWithHttpInfo (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest);
        /// <summary>
        /// Update profile
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <returns>ProfileModel</returns>
        ProfileModel UpdateProfile (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest);

        /// <summary>
        /// Update profile
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <returns>ApiResponse of ProfileModel</returns>
        ApiResponse<ProfileModel> UpdateProfileWithHttpInfo (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest);
        /// <summary>
        /// Update profile player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its permissions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <returns>UpdateProfilePlayer200Response</returns>
        UpdateProfilePlayer200Response UpdateProfilePlayer (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest);

        /// <summary>
        /// Update profile player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its permissions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <returns>ApiResponse of UpdateProfilePlayer200Response</returns>
        ApiResponse<UpdateProfilePlayer200Response> UpdateProfilePlayerWithHttpInfo (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Approve ecosystem game
        /// </summary>
        /// <remarks>
        /// Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApproveEcosystemGameAsync (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Approve ecosystem game
        /// </summary>
        /// <remarks>
        /// Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApproveEcosystemGameWithHttpInfoAsync (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Authenticate ecosystem
        /// </summary>
        /// <remarks>
        /// Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EcosystemModel</returns>
        System.Threading.Tasks.Task<EcosystemModel> AuthEcosystemAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticate ecosystem
        /// </summary>
        /// <remarks>
        /// Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EcosystemModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcosystemModel>> AuthEcosystemWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Authenticate profile
        /// </summary>
        /// <remarks>
        /// Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthProfile200Response</returns>
        System.Threading.Tasks.Task<AuthProfile200Response> AuthProfileAsync (string xEcosystemKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticate profile
        /// </summary>
        /// <remarks>
        /// Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthProfile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthProfile200Response>> AuthProfileWithHttpInfoAsync (string xEcosystemKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Authenticate profile player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        System.Threading.Tasks.Task<AuthPlayer200Response> AuthProfilePlayerAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticate profile player
        /// </summary>
        /// <remarks>
        /// Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> AuthProfilePlayerWithHttpInfoAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create ecosystem
        /// </summary>
        /// <remarks>
        /// Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EcosystemModel</returns>
        System.Threading.Tasks.Task<EcosystemModel> CreateEcosystemAsync (CreateEcosystemRequest createEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create ecosystem
        /// </summary>
        /// <remarks>
        /// Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EcosystemModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcosystemModel>> CreateEcosystemWithHttpInfoAsync (CreateEcosystemRequest createEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create profile
        /// </summary>
        /// <remarks>
        /// Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthProfile200Response</returns>
        System.Threading.Tasks.Task<AuthProfile200Response> CreateProfileAsync (string xEcosystemKey, CreateProfileRequest createProfileRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create profile
        /// </summary>
        /// <remarks>
        /// Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthProfile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthProfile200Response>> CreateProfileWithHttpInfoAsync (string xEcosystemKey, CreateProfileRequest createProfileRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create profile player
        /// </summary>
        /// <remarks>
        /// Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        System.Threading.Tasks.Task<AuthPlayer200Response> CreateProfilePlayerAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create profile player
        /// </summary>
        /// <remarks>
        /// Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> CreateProfilePlayerWithHttpInfoAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get ecosystem
        /// </summary>
        /// <remarks>
        /// Returns a ecosystem object for the provided ecosystem id.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PublicEcosystem</returns>
        System.Threading.Tasks.Task<PublicEcosystem> GetEcosystemAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get ecosystem
        /// </summary>
        /// <remarks>
        /// Returns a ecosystem object for the provided ecosystem id.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PublicEcosystem)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicEcosystem>> GetEcosystemWithHttpInfoAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get ecosystem game
        /// </summary>
        /// <remarks>
        /// Returns a game object for the provided game id that the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PublicGame</returns>
        System.Threading.Tasks.Task<PublicGame> GetEcosystemGameAsync (string ecosystemId, string gameId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get ecosystem game
        /// </summary>
        /// <remarks>
        /// Returns a game object for the provided game id that the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PublicGame)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublicGame>> GetEcosystemGameWithHttpInfoAsync (string ecosystemId, string gameId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get ecosystem games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<PublicGame></returns>
        System.Threading.Tasks.Task<List<PublicGame>> GetEcosystemGamesAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get ecosystem games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the ecosystem has approved.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PublicGame&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PublicGame>>> GetEcosystemGamesWithHttpInfoAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get profile game
        /// </summary>
        /// <remarks>
        /// Returns a game this profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetProfileGames200ResponseInner</returns>
        System.Threading.Tasks.Task<GetProfileGames200ResponseInner> GetProfileGameAsync (string profileId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get profile game
        /// </summary>
        /// <remarks>
        /// Returns a game this profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetProfileGames200ResponseInner)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfileGames200ResponseInner>> GetProfileGameWithHttpInfoAsync (string profileId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get profile games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the authorized profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetProfileGames200ResponseInner></returns>
        System.Threading.Tasks.Task<List<GetProfileGames200ResponseInner>> GetProfileGamesAsync (string profileId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get profile games
        /// </summary>
        /// <remarks>
        /// Returns an array of games the authorized profile has connected player accounts for.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetProfileGames200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetProfileGames200ResponseInner>>> GetProfileGamesWithHttpInfoAsync (string profileId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unapprove ecosystem game
        /// </summary>
        /// <remarks>
        /// Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnapproveEcosystemGameAsync (string ecosystemId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unapprove ecosystem game
        /// </summary>
        /// <remarks>
        /// Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnapproveEcosystemGameWithHttpInfoAsync (string ecosystemId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update ecosystem
        /// </summary>
        /// <remarks>
        /// Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EcosystemModel</returns>
        System.Threading.Tasks.Task<EcosystemModel> UpdateEcosystemAsync (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update ecosystem
        /// </summary>
        /// <remarks>
        /// Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EcosystemModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcosystemModel>> UpdateEcosystemWithHttpInfoAsync (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update profile
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProfileModel</returns>
        System.Threading.Tasks.Task<ProfileModel> UpdateProfileAsync (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update profile
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProfileModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfileModel>> UpdateProfileWithHttpInfoAsync (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update profile player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its permissions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateProfilePlayer200Response</returns>
        System.Threading.Tasks.Task<UpdateProfilePlayer200Response> UpdateProfilePlayerAsync (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update profile player
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a player. Such as changing its permissions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateProfilePlayer200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateProfilePlayer200Response>> UpdateProfilePlayerWithHttpInfoAsync (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EcosystemsApi : IEcosystemsApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EcosystemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EcosystemsApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EcosystemsApi"/> class
        /// </summary>
        /// <returns></returns>
        public EcosystemsApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EcosystemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EcosystemsApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Approve ecosystem game Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <returns></returns>
        public void ApproveEcosystemGame (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest)
        {
             ApproveEcosystemGameWithHttpInfo(ecosystemId, xAuthorization, approveEcosystemGameRequest);
        }

        /// <summary>
        /// Approve ecosystem game Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApproveEcosystemGameWithHttpInfo (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest)
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->ApproveEcosystemGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->ApproveEcosystemGame");
            // verify the required parameter 'approveEcosystemGameRequest' is set
            if (approveEcosystemGameRequest == null)
                throw new ApiException(400, "Missing required parameter 'approveEcosystemGameRequest' when calling EcosystemsApi->ApproveEcosystemGame");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (approveEcosystemGameRequest != null && approveEcosystemGameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(approveEcosystemGameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = approveEcosystemGameRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveEcosystemGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Approve ecosystem game Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApproveEcosystemGameAsync (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ApproveEcosystemGameWithHttpInfoAsync(ecosystemId, xAuthorization, approveEcosystemGameRequest, cancellationToken);

        }

        /// <summary>
        /// Approve ecosystem game Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="approveEcosystemGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApproveEcosystemGameWithHttpInfoAsync (string ecosystemId, string xAuthorization, ApproveEcosystemGameRequest approveEcosystemGameRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->ApproveEcosystemGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->ApproveEcosystemGame");
            // verify the required parameter 'approveEcosystemGameRequest' is set
            if (approveEcosystemGameRequest == null)
                throw new ApiException(400, "Missing required parameter 'approveEcosystemGameRequest' when calling EcosystemsApi->ApproveEcosystemGame");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (approveEcosystemGameRequest != null && approveEcosystemGameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(approveEcosystemGameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = approveEcosystemGameRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveEcosystemGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Authenticate ecosystem Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>EcosystemModel</returns>
        public EcosystemModel AuthEcosystem ()
        {
             ApiResponse<EcosystemModel> localVarResponse = AuthEcosystemWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate ecosystem Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of EcosystemModel</returns>
        public ApiResponse<EcosystemModel> AuthEcosystemWithHttpInfo ()
        {

            var localVarPath = "/v1/ecosystems/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcosystemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EcosystemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcosystemModel)));
        }

        /// <summary>
        /// Authenticate ecosystem Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EcosystemModel</returns>
        public async System.Threading.Tasks.Task<EcosystemModel> AuthEcosystemAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EcosystemModel> localVarResponse = await AuthEcosystemWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate ecosystem Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EcosystemModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcosystemModel>> AuthEcosystemWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/ecosystems/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcosystemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EcosystemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcosystemModel)));
        }

        /// <summary>
        /// Authenticate profile Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <returns>AuthProfile200Response</returns>
        public AuthProfile200Response AuthProfile (string xEcosystemKey)
        {
             ApiResponse<AuthProfile200Response> localVarResponse = AuthProfileWithHttpInfo(xEcosystemKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate profile Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <returns>ApiResponse of AuthProfile200Response</returns>
        public ApiResponse<AuthProfile200Response> AuthProfileWithHttpInfo (string xEcosystemKey)
        {
            // verify the required parameter 'xEcosystemKey' is set
            if (xEcosystemKey == null)
                throw new ApiException(400, "Missing required parameter 'xEcosystemKey' when calling EcosystemsApi->AuthProfile");

            var localVarPath = "/v1/profiles/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEcosystemKey != null) localVarHeaderParams.Add("X-Ecosystem-Key", this.Configuration.ApiClient.ParameterToString(xEcosystemKey)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthProfile200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthProfile200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthProfile200Response)));
        }

        /// <summary>
        /// Authenticate profile Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthProfile200Response</returns>
        public async System.Threading.Tasks.Task<AuthProfile200Response> AuthProfileAsync (string xEcosystemKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthProfile200Response> localVarResponse = await AuthProfileWithHttpInfoAsync(xEcosystemKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate profile Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthProfile200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthProfile200Response>> AuthProfileWithHttpInfoAsync (string xEcosystemKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xEcosystemKey' is set
            if (xEcosystemKey == null)
                throw new ApiException(400, "Missing required parameter 'xEcosystemKey' when calling EcosystemsApi->AuthProfile");

            var localVarPath = "/v1/profiles/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEcosystemKey != null) localVarHeaderParams.Add("X-Ecosystem-Key", this.Configuration.ApiClient.ParameterToString(xEcosystemKey)); // header parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthProfile200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthProfile200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthProfile200Response)));
        }

        /// <summary>
        /// Authenticate profile player Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <returns>AuthPlayer200Response</returns>
        public AuthPlayer200Response AuthProfilePlayer (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername)
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = AuthProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate profile player Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        public ApiResponse<AuthPlayer200Response> AuthProfilePlayerWithHttpInfo (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'xWalletDecryptKey' is set
            if (xWalletDecryptKey == null)
                throw new ApiException(400, "Missing required parameter 'xWalletDecryptKey' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'xUsername' is set
            if (xUsername == null)
                throw new ApiException(400, "Missing required parameter 'xUsername' when calling EcosystemsApi->AuthProfilePlayer");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xWalletDecryptKey != null) localVarHeaderParams.Add("X-Wallet-Decrypt-Key", this.Configuration.ApiClient.ParameterToString(xWalletDecryptKey)); // header parameter
            if (xUsername != null) localVarHeaderParams.Add("X-Username", this.Configuration.ApiClient.ParameterToString(xUsername)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthProfilePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Authenticate profile player Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        public async System.Threading.Tasks.Task<AuthPlayer200Response> AuthProfilePlayerAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = await AuthProfilePlayerWithHttpInfoAsync(profileId, gameId, xAuthorization, xWalletDecryptKey, xUsername, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate profile player Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="xUsername">The username of a player.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> AuthProfilePlayerWithHttpInfoAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, string xUsername, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'xWalletDecryptKey' is set
            if (xWalletDecryptKey == null)
                throw new ApiException(400, "Missing required parameter 'xWalletDecryptKey' when calling EcosystemsApi->AuthProfilePlayer");
            // verify the required parameter 'xUsername' is set
            if (xUsername == null)
                throw new ApiException(400, "Missing required parameter 'xUsername' when calling EcosystemsApi->AuthProfilePlayer");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xWalletDecryptKey != null) localVarHeaderParams.Add("X-Wallet-Decrypt-Key", this.Configuration.ApiClient.ParameterToString(xWalletDecryptKey)); // header parameter
            if (xUsername != null) localVarHeaderParams.Add("X-Username", this.Configuration.ApiClient.ParameterToString(xUsername)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthProfilePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Create ecosystem Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <returns>EcosystemModel</returns>
        public EcosystemModel CreateEcosystem (CreateEcosystemRequest createEcosystemRequest)
        {
             ApiResponse<EcosystemModel> localVarResponse = CreateEcosystemWithHttpInfo(createEcosystemRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create ecosystem Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <returns>ApiResponse of EcosystemModel</returns>
        public ApiResponse<EcosystemModel> CreateEcosystemWithHttpInfo (CreateEcosystemRequest createEcosystemRequest)
        {
            // verify the required parameter 'createEcosystemRequest' is set
            if (createEcosystemRequest == null)
                throw new ApiException(400, "Missing required parameter 'createEcosystemRequest' when calling EcosystemsApi->CreateEcosystem");

            var localVarPath = "/v1/ecosystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createEcosystemRequest != null && createEcosystemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createEcosystemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createEcosystemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcosystemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EcosystemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcosystemModel)));
        }

        /// <summary>
        /// Create ecosystem Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EcosystemModel</returns>
        public async System.Threading.Tasks.Task<EcosystemModel> CreateEcosystemAsync (CreateEcosystemRequest createEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EcosystemModel> localVarResponse = await CreateEcosystemWithHttpInfoAsync(createEcosystemRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create ecosystem Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EcosystemModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcosystemModel>> CreateEcosystemWithHttpInfoAsync (CreateEcosystemRequest createEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createEcosystemRequest' is set
            if (createEcosystemRequest == null)
                throw new ApiException(400, "Missing required parameter 'createEcosystemRequest' when calling EcosystemsApi->CreateEcosystem");

            var localVarPath = "/v1/ecosystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createEcosystemRequest != null && createEcosystemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createEcosystemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createEcosystemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcosystemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EcosystemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcosystemModel)));
        }

        /// <summary>
        /// Create profile Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <returns>AuthProfile200Response</returns>
        public AuthProfile200Response CreateProfile (string xEcosystemKey, CreateProfileRequest createProfileRequest)
        {
             ApiResponse<AuthProfile200Response> localVarResponse = CreateProfileWithHttpInfo(xEcosystemKey, createProfileRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create profile Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <returns>ApiResponse of AuthProfile200Response</returns>
        public ApiResponse<AuthProfile200Response> CreateProfileWithHttpInfo (string xEcosystemKey, CreateProfileRequest createProfileRequest)
        {
            // verify the required parameter 'xEcosystemKey' is set
            if (xEcosystemKey == null)
                throw new ApiException(400, "Missing required parameter 'xEcosystemKey' when calling EcosystemsApi->CreateProfile");
            // verify the required parameter 'createProfileRequest' is set
            if (createProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'createProfileRequest' when calling EcosystemsApi->CreateProfile");

            var localVarPath = "/v1/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEcosystemKey != null) localVarHeaderParams.Add("X-Ecosystem-Key", this.Configuration.ApiClient.ParameterToString(xEcosystemKey)); // header parameter
            if (createProfileRequest != null && createProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProfileRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthProfile200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthProfile200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthProfile200Response)));
        }

        /// <summary>
        /// Create profile Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthProfile200Response</returns>
        public async System.Threading.Tasks.Task<AuthProfile200Response> CreateProfileAsync (string xEcosystemKey, CreateProfileRequest createProfileRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthProfile200Response> localVarResponse = await CreateProfileWithHttpInfoAsync(xEcosystemKey, createProfileRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create profile Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xEcosystemKey">The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc.</param>
        /// <param name="createProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthProfile200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthProfile200Response>> CreateProfileWithHttpInfoAsync (string xEcosystemKey, CreateProfileRequest createProfileRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xEcosystemKey' is set
            if (xEcosystemKey == null)
                throw new ApiException(400, "Missing required parameter 'xEcosystemKey' when calling EcosystemsApi->CreateProfile");
            // verify the required parameter 'createProfileRequest' is set
            if (createProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'createProfileRequest' when calling EcosystemsApi->CreateProfile");

            var localVarPath = "/v1/profiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xEcosystemKey != null) localVarHeaderParams.Add("X-Ecosystem-Key", this.Configuration.ApiClient.ParameterToString(xEcosystemKey)); // header parameter
            if (createProfileRequest != null && createProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProfileRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthProfile200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthProfile200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthProfile200Response)));
        }

        /// <summary>
        /// Create profile player Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <returns>AuthPlayer200Response</returns>
        public AuthPlayer200Response CreateProfilePlayer (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest)
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = CreateProfilePlayerWithHttpInfo(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create profile player Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <returns>ApiResponse of AuthPlayer200Response</returns>
        public ApiResponse<AuthPlayer200Response> CreateProfilePlayerWithHttpInfo (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'xWalletDecryptKey' is set
            if (xWalletDecryptKey == null)
                throw new ApiException(400, "Missing required parameter 'xWalletDecryptKey' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'createProfilePlayerRequest' is set
            if (createProfilePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'createProfilePlayerRequest' when calling EcosystemsApi->CreateProfilePlayer");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xWalletDecryptKey != null) localVarHeaderParams.Add("X-Wallet-Decrypt-Key", this.Configuration.ApiClient.ParameterToString(xWalletDecryptKey)); // header parameter
            if (createProfilePlayerRequest != null && createProfilePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createProfilePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProfilePlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProfilePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Create profile player Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthPlayer200Response</returns>
        public async System.Threading.Tasks.Task<AuthPlayer200Response> CreateProfilePlayerAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthPlayer200Response> localVarResponse = await CreateProfilePlayerWithHttpInfoAsync(profileId, gameId, xAuthorization, xWalletDecryptKey, createProfilePlayerRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create profile player Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="createProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthPlayer200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthPlayer200Response>> CreateProfilePlayerWithHttpInfoAsync (string profileId, string gameId, string xAuthorization, string xWalletDecryptKey, CreateProfilePlayerRequest createProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'xWalletDecryptKey' is set
            if (xWalletDecryptKey == null)
                throw new ApiException(400, "Missing required parameter 'xWalletDecryptKey' when calling EcosystemsApi->CreateProfilePlayer");
            // verify the required parameter 'createProfilePlayerRequest' is set
            if (createProfilePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'createProfilePlayerRequest' when calling EcosystemsApi->CreateProfilePlayer");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xWalletDecryptKey != null) localVarHeaderParams.Add("X-Wallet-Decrypt-Key", this.Configuration.ApiClient.ParameterToString(xWalletDecryptKey)); // header parameter
            if (createProfilePlayerRequest != null && createProfilePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createProfilePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProfilePlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProfilePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthPlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthPlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthPlayer200Response)));
        }

        /// <summary>
        /// Get ecosystem Returns a ecosystem object for the provided ecosystem id.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>PublicEcosystem</returns>
        public PublicEcosystem GetEcosystem (string ecosystemId)
        {
             ApiResponse<PublicEcosystem> localVarResponse = GetEcosystemWithHttpInfo(ecosystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ecosystem Returns a ecosystem object for the provided ecosystem id.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>ApiResponse of PublicEcosystem</returns>
        public ApiResponse<PublicEcosystem> GetEcosystemWithHttpInfo (string ecosystemId)
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->GetEcosystem");

            var localVarPath = "/v1/ecosystems/{ecosystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicEcosystem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublicEcosystem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicEcosystem)));
        }

        /// <summary>
        /// Get ecosystem Returns a ecosystem object for the provided ecosystem id.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PublicEcosystem</returns>
        public async System.Threading.Tasks.Task<PublicEcosystem> GetEcosystemAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PublicEcosystem> localVarResponse = await GetEcosystemWithHttpInfoAsync(ecosystemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ecosystem Returns a ecosystem object for the provided ecosystem id.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PublicEcosystem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicEcosystem>> GetEcosystemWithHttpInfoAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->GetEcosystem");

            var localVarPath = "/v1/ecosystems/{ecosystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicEcosystem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublicEcosystem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicEcosystem)));
        }

        /// <summary>
        /// Get ecosystem game Returns a game object for the provided game id that the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <returns>PublicGame</returns>
        public PublicGame GetEcosystemGame (string ecosystemId, string gameId)
        {
             ApiResponse<PublicGame> localVarResponse = GetEcosystemGameWithHttpInfo(ecosystemId, gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ecosystem game Returns a game object for the provided game id that the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <returns>ApiResponse of PublicGame</returns>
        public ApiResponse<PublicGame> GetEcosystemGameWithHttpInfo (string ecosystemId, string gameId)
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->GetEcosystemGame");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->GetEcosystemGame");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEcosystemGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicGame>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublicGame) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicGame)));
        }

        /// <summary>
        /// Get ecosystem game Returns a game object for the provided game id that the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PublicGame</returns>
        public async System.Threading.Tasks.Task<PublicGame> GetEcosystemGameAsync (string ecosystemId, string gameId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PublicGame> localVarResponse = await GetEcosystemGameWithHttpInfoAsync(ecosystemId, gameId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ecosystem game Returns a game object for the provided game id that the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PublicGame)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PublicGame>> GetEcosystemGameWithHttpInfoAsync (string ecosystemId, string gameId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->GetEcosystemGame");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->GetEcosystemGame");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEcosystemGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PublicGame>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PublicGame) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PublicGame)));
        }

        /// <summary>
        /// Get ecosystem games Returns an array of games the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>List<PublicGame></returns>
        public List<PublicGame> GetEcosystemGames (string ecosystemId)
        {
             ApiResponse<List<PublicGame>> localVarResponse = GetEcosystemGamesWithHttpInfo(ecosystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ecosystem games Returns an array of games the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <returns>ApiResponse of List<PublicGame></returns>
        public ApiResponse<List<PublicGame>> GetEcosystemGamesWithHttpInfo (string ecosystemId)
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->GetEcosystemGames");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEcosystemGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublicGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PublicGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicGame>)));
        }

        /// <summary>
        /// Get ecosystem games Returns an array of games the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<PublicGame></returns>
        public async System.Threading.Tasks.Task<List<PublicGame>> GetEcosystemGamesAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<PublicGame>> localVarResponse = await GetEcosystemGamesWithHttpInfoAsync(ecosystemId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ecosystem games Returns an array of games the ecosystem has approved.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">Any ecosystem id within the MetaFab platform.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;PublicGame&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PublicGame>>> GetEcosystemGamesWithHttpInfoAsync (string ecosystemId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->GetEcosystemGames");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEcosystemGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PublicGame>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PublicGame>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PublicGame>)));
        }

        /// <summary>
        /// Get profile game Returns a game this profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>GetProfileGames200ResponseInner</returns>
        public GetProfileGames200ResponseInner GetProfileGame (string profileId, string gameId, string xAuthorization)
        {
             ApiResponse<GetProfileGames200ResponseInner> localVarResponse = GetProfileGameWithHttpInfo(profileId, gameId, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get profile game Returns a game this profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>ApiResponse of GetProfileGames200ResponseInner</returns>
        public ApiResponse<GetProfileGames200ResponseInner> GetProfileGameWithHttpInfo (string profileId, string gameId, string xAuthorization)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->GetProfileGame");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->GetProfileGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->GetProfileGame");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfileGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProfileGames200ResponseInner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetProfileGames200ResponseInner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProfileGames200ResponseInner)));
        }

        /// <summary>
        /// Get profile game Returns a game this profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetProfileGames200ResponseInner</returns>
        public async System.Threading.Tasks.Task<GetProfileGames200ResponseInner> GetProfileGameAsync (string profileId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetProfileGames200ResponseInner> localVarResponse = await GetProfileGameWithHttpInfoAsync(profileId, gameId, xAuthorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get profile game Returns a game this profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetProfileGames200ResponseInner)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetProfileGames200ResponseInner>> GetProfileGameWithHttpInfoAsync (string profileId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->GetProfileGame");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->GetProfileGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->GetProfileGame");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfileGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetProfileGames200ResponseInner>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetProfileGames200ResponseInner) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetProfileGames200ResponseInner)));
        }

        /// <summary>
        /// Get profile games Returns an array of games the authorized profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>List<GetProfileGames200ResponseInner></returns>
        public List<GetProfileGames200ResponseInner> GetProfileGames (string profileId, string xAuthorization)
        {
             ApiResponse<List<GetProfileGames200ResponseInner>> localVarResponse = GetProfileGamesWithHttpInfo(profileId, xAuthorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get profile games Returns an array of games the authorized profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <returns>ApiResponse of List<GetProfileGames200ResponseInner></returns>
        public ApiResponse<List<GetProfileGames200ResponseInner>> GetProfileGamesWithHttpInfo (string profileId, string xAuthorization)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->GetProfileGames");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->GetProfileGames");

            var localVarPath = "/v1/profiles/{profileId}/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfileGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetProfileGames200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetProfileGames200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetProfileGames200ResponseInner>)));
        }

        /// <summary>
        /// Get profile games Returns an array of games the authorized profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetProfileGames200ResponseInner></returns>
        public async System.Threading.Tasks.Task<List<GetProfileGames200ResponseInner>> GetProfileGamesAsync (string profileId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GetProfileGames200ResponseInner>> localVarResponse = await GetProfileGamesWithHttpInfoAsync(profileId, xAuthorization, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get profile games Returns an array of games the authorized profile has connected player accounts for.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetProfileGames200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetProfileGames200ResponseInner>>> GetProfileGamesWithHttpInfoAsync (string profileId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->GetProfileGames");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->GetProfileGames");

            var localVarPath = "/v1/profiles/{profileId}/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProfileGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetProfileGames200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetProfileGames200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetProfileGames200ResponseInner>)));
        }

        /// <summary>
        /// Unapprove ecosystem game Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <returns></returns>
        public void UnapproveEcosystemGame (string ecosystemId, string gameId, string xAuthorization)
        {
             UnapproveEcosystemGameWithHttpInfo(ecosystemId, gameId, xAuthorization);
        }

        /// <summary>
        /// Unapprove ecosystem game Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnapproveEcosystemGameWithHttpInfo (string ecosystemId, string gameId, string xAuthorization)
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->UnapproveEcosystemGame");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->UnapproveEcosystemGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UnapproveEcosystemGame");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnapproveEcosystemGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unapprove ecosystem game Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnapproveEcosystemGameAsync (string ecosystemId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UnapproveEcosystemGameWithHttpInfoAsync(ecosystemId, gameId, xAuthorization, cancellationToken);

        }

        /// <summary>
        /// Unapprove ecosystem game Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnapproveEcosystemGameWithHttpInfoAsync (string ecosystemId, string gameId, string xAuthorization, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->UnapproveEcosystemGame");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->UnapproveEcosystemGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UnapproveEcosystemGame");

            var localVarPath = "/v1/ecosystems/{ecosystemId}/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnapproveEcosystemGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update ecosystem Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <returns>EcosystemModel</returns>
        public EcosystemModel UpdateEcosystem (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest)
        {
             ApiResponse<EcosystemModel> localVarResponse = UpdateEcosystemWithHttpInfo(ecosystemId, xAuthorization, updateEcosystemRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update ecosystem Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <returns>ApiResponse of EcosystemModel</returns>
        public ApiResponse<EcosystemModel> UpdateEcosystemWithHttpInfo (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest)
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->UpdateEcosystem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UpdateEcosystem");
            // verify the required parameter 'updateEcosystemRequest' is set
            if (updateEcosystemRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateEcosystemRequest' when calling EcosystemsApi->UpdateEcosystem");

            var localVarPath = "/v1/ecosystems/{ecosystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updateEcosystemRequest != null && updateEcosystemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateEcosystemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEcosystemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcosystemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EcosystemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcosystemModel)));
        }

        /// <summary>
        /// Update ecosystem Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EcosystemModel</returns>
        public async System.Threading.Tasks.Task<EcosystemModel> UpdateEcosystemAsync (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<EcosystemModel> localVarResponse = await UpdateEcosystemWithHttpInfoAsync(ecosystemId, xAuthorization, updateEcosystemRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update ecosystem Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ecosystemId">The ecosystem id of the authenticating ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating ecosystem.</param>
        /// <param name="updateEcosystemRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EcosystemModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcosystemModel>> UpdateEcosystemWithHttpInfoAsync (string ecosystemId, string xAuthorization, UpdateEcosystemRequest updateEcosystemRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'ecosystemId' is set
            if (ecosystemId == null)
                throw new ApiException(400, "Missing required parameter 'ecosystemId' when calling EcosystemsApi->UpdateEcosystem");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UpdateEcosystem");
            // verify the required parameter 'updateEcosystemRequest' is set
            if (updateEcosystemRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateEcosystemRequest' when calling EcosystemsApi->UpdateEcosystem");

            var localVarPath = "/v1/ecosystems/{ecosystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ecosystemId != null) localVarPathParams.Add("ecosystemId", this.Configuration.ApiClient.ParameterToString(ecosystemId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updateEcosystemRequest != null && updateEcosystemRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateEcosystemRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEcosystemRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEcosystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcosystemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EcosystemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcosystemModel)));
        }

        /// <summary>
        /// Update profile Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <returns>ProfileModel</returns>
        public ProfileModel UpdateProfile (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest)
        {
             ApiResponse<ProfileModel> localVarResponse = UpdateProfileWithHttpInfo(profileId, xAuthorization, updateProfileRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update profile Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <returns>ApiResponse of ProfileModel</returns>
        public ApiResponse<ProfileModel> UpdateProfileWithHttpInfo (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->UpdateProfile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UpdateProfile");
            // verify the required parameter 'updateProfileRequest' is set
            if (updateProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateProfileRequest' when calling EcosystemsApi->UpdateProfile");

            var localVarPath = "/v1/profiles/{profileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updateProfileRequest != null && updateProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfileRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileModel)));
        }

        /// <summary>
        /// Update profile Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProfileModel</returns>
        public async System.Threading.Tasks.Task<ProfileModel> UpdateProfileAsync (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProfileModel> localVarResponse = await UpdateProfileWithHttpInfoAsync(profileId, xAuthorization, updateProfileRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update profile Update various fields specific to a profile. Such as changing its password and resetting its access token.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="updateProfileRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProfileModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProfileModel>> UpdateProfileWithHttpInfoAsync (string profileId, string xAuthorization, UpdateProfileRequest updateProfileRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->UpdateProfile");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UpdateProfile");
            // verify the required parameter 'updateProfileRequest' is set
            if (updateProfileRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateProfileRequest' when calling EcosystemsApi->UpdateProfile");

            var localVarPath = "/v1/profiles/{profileId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updateProfileRequest != null && updateProfileRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProfileRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfileRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProfileModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProfileModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProfileModel)));
        }

        /// <summary>
        /// Update profile player Update various fields specific to a player. Such as changing its permissions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <returns>UpdateProfilePlayer200Response</returns>
        public UpdateProfilePlayer200Response UpdateProfilePlayer (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest)
        {
             ApiResponse<UpdateProfilePlayer200Response> localVarResponse = UpdateProfilePlayerWithHttpInfo(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update profile player Update various fields specific to a player. Such as changing its permissions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <returns>ApiResponse of UpdateProfilePlayer200Response</returns>
        public ApiResponse<UpdateProfilePlayer200Response> UpdateProfilePlayerWithHttpInfo (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest)
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'xWalletDecryptKey' is set
            if (xWalletDecryptKey == null)
                throw new ApiException(400, "Missing required parameter 'xWalletDecryptKey' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'updateProfilePlayerRequest' is set
            if (updateProfilePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateProfilePlayerRequest' when calling EcosystemsApi->UpdateProfilePlayer");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("playerId", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xWalletDecryptKey != null) localVarHeaderParams.Add("X-Wallet-Decrypt-Key", this.Configuration.ApiClient.ParameterToString(xWalletDecryptKey)); // header parameter
            if (updateProfilePlayerRequest != null && updateProfilePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProfilePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfilePlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfilePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateProfilePlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateProfilePlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateProfilePlayer200Response)));
        }

        /// <summary>
        /// Update profile player Update various fields specific to a player. Such as changing its permissions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateProfilePlayer200Response</returns>
        public async System.Threading.Tasks.Task<UpdateProfilePlayer200Response> UpdateProfilePlayerAsync (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateProfilePlayer200Response> localVarResponse = await UpdateProfilePlayerWithHttpInfoAsync(profileId, gameId, playerId, xAuthorization, xWalletDecryptKey, updateProfilePlayerRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update profile player Update various fields specific to a player. Such as changing its permissions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="profileId">The profile id of the authenticating profile.</param>
        /// <param name="gameId">Any game id within the MetaFab platform.</param>
        /// <param name="playerId">Any player id within the MetaFab platform.</param>
        /// <param name="xAuthorization">The &#x60;accessToken&#x60; of the authenticating profile.</param>
        /// <param name="xWalletDecryptKey">The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.</param>
        /// <param name="updateProfilePlayerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateProfilePlayer200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateProfilePlayer200Response>> UpdateProfilePlayerWithHttpInfoAsync (string profileId, string gameId, string playerId, string xAuthorization, string xWalletDecryptKey, UpdateProfilePlayerRequest updateProfilePlayerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'profileId' is set
            if (profileId == null)
                throw new ApiException(400, "Missing required parameter 'profileId' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'xWalletDecryptKey' is set
            if (xWalletDecryptKey == null)
                throw new ApiException(400, "Missing required parameter 'xWalletDecryptKey' when calling EcosystemsApi->UpdateProfilePlayer");
            // verify the required parameter 'updateProfilePlayerRequest' is set
            if (updateProfilePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateProfilePlayerRequest' when calling EcosystemsApi->UpdateProfilePlayer");

            var localVarPath = "/v1/profiles/{profileId}/games/{gameId}/players/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (profileId != null) localVarPathParams.Add("profileId", this.Configuration.ApiClient.ParameterToString(profileId)); // path parameter
            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (playerId != null) localVarPathParams.Add("playerId", this.Configuration.ApiClient.ParameterToString(playerId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xWalletDecryptKey != null) localVarHeaderParams.Add("X-Wallet-Decrypt-Key", this.Configuration.ApiClient.ParameterToString(xWalletDecryptKey)); // header parameter
            if (updateProfilePlayerRequest != null && updateProfilePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateProfilePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateProfilePlayerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProfilePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateProfilePlayer200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateProfilePlayer200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateProfilePlayer200Response)));
        }

    }
}

/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShopsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create shop
        /// </summary>
        /// <remarks>
        /// Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <returns>CreateShop200Response</returns>
        CreateShop200Response CreateShop (string xAuthorization, string xPassword, CreateShopRequest createShopRequest);

        /// <summary>
        /// Create shop
        /// </summary>
        /// <remarks>
        /// Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <returns>ApiResponse of CreateShop200Response</returns>
        ApiResponse<CreateShop200Response> CreateShopWithHttpInfo (string xAuthorization, string xPassword, CreateShopRequest createShopRequest);
        /// <summary>
        /// Get shop offer
        /// </summary>
        /// <remarks>
        /// Returns a shop offer object for the provided shopOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <returns>ShopOffer</returns>
        ShopOffer GetShopOffer (string shopId, string shopOfferId);

        /// <summary>
        /// Get shop offer
        /// </summary>
        /// <remarks>
        /// Returns a shop offer object for the provided shopOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of ShopOffer</returns>
        ApiResponse<ShopOffer> GetShopOfferWithHttpInfo (string shopId, string shopOfferId);
        /// <summary>
        /// Get shop offers
        /// </summary>
        /// <remarks>
        /// Returns all shop offers as an array of shop offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <returns>List<ShopOffer></returns>
        List<ShopOffer> GetShopOffers (string shopId);

        /// <summary>
        /// Get shop offers
        /// </summary>
        /// <remarks>
        /// Returns all shop offers as an array of shop offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<ShopOffer></returns>
        ApiResponse<List<ShopOffer>> GetShopOffersWithHttpInfo (string shopId);
        /// <summary>
        /// Get shops
        /// </summary>
        /// <remarks>
        /// Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetShops200ResponseInner></returns>
        List<GetShops200ResponseInner> GetShops (string xGameKey);

        /// <summary>
        /// Get shops
        /// </summary>
        /// <remarks>
        /// Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetShops200ResponseInner></returns>
        ApiResponse<List<GetShops200ResponseInner>> GetShopsWithHttpInfo (string xGameKey);
        /// <summary>
        /// Remove shop offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>TransactionModel</returns>
        TransactionModel RemoveShopOffer (string shopId, string shopOfferId, string xAuthorization, string xPassword);

        /// <summary>
        /// Remove shop offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> RemoveShopOfferWithHttpInfo (string shopId, string shopOfferId, string xAuthorization, string xPassword);
        /// <summary>
        /// Set shop offer
        /// </summary>
        /// <remarks>
        /// Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel SetShopOffer (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest);

        /// <summary>
        /// Set shop offer
        /// </summary>
        /// <remarks>
        /// Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> SetShopOfferWithHttpInfo (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest);
        /// <summary>
        /// Use shop offer
        /// </summary>
        /// <remarks>
        /// Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>TransactionModel</returns>
        TransactionModel UseShopOffer (string shopId, string shopOfferId, string xAuthorization, string xPassword);

        /// <summary>
        /// Use shop offer
        /// </summary>
        /// <remarks>
        /// Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> UseShopOfferWithHttpInfo (string shopId, string shopOfferId, string xAuthorization, string xPassword);
        /// <summary>
        /// Withdraw from shop
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel WithdrawFromShop (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest);

        /// <summary>
        /// Withdraw from shop
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> WithdrawFromShopWithHttpInfo (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create shop
        /// </summary>
        /// <remarks>
        /// Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateShop200Response</returns>
        System.Threading.Tasks.Task<CreateShop200Response> CreateShopAsync (string xAuthorization, string xPassword, CreateShopRequest createShopRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create shop
        /// </summary>
        /// <remarks>
        /// Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateShop200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShop200Response>> CreateShopWithHttpInfoAsync (string xAuthorization, string xPassword, CreateShopRequest createShopRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get shop offer
        /// </summary>
        /// <remarks>
        /// Returns a shop offer object for the provided shopOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ShopOffer</returns>
        System.Threading.Tasks.Task<ShopOffer> GetShopOfferAsync (string shopId, string shopOfferId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get shop offer
        /// </summary>
        /// <remarks>
        /// Returns a shop offer object for the provided shopOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ShopOffer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShopOffer>> GetShopOfferWithHttpInfoAsync (string shopId, string shopOfferId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get shop offers
        /// </summary>
        /// <remarks>
        /// Returns all shop offers as an array of shop offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ShopOffer></returns>
        System.Threading.Tasks.Task<List<ShopOffer>> GetShopOffersAsync (string shopId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get shop offers
        /// </summary>
        /// <remarks>
        /// Returns all shop offers as an array of shop offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ShopOffer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShopOffer>>> GetShopOffersWithHttpInfoAsync (string shopId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get shops
        /// </summary>
        /// <remarks>
        /// Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetShops200ResponseInner></returns>
        System.Threading.Tasks.Task<List<GetShops200ResponseInner>> GetShopsAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get shops
        /// </summary>
        /// <remarks>
        /// Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetShops200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetShops200ResponseInner>>> GetShopsWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove shop offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> RemoveShopOfferAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove shop offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RemoveShopOfferWithHttpInfoAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set shop offer
        /// </summary>
        /// <remarks>
        /// Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> SetShopOfferAsync (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set shop offer
        /// </summary>
        /// <remarks>
        /// Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetShopOfferWithHttpInfoAsync (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Use shop offer
        /// </summary>
        /// <remarks>
        /// Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> UseShopOfferAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Use shop offer
        /// </summary>
        /// <remarks>
        /// Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> UseShopOfferWithHttpInfoAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Withdraw from shop
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> WithdrawFromShopAsync (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Withdraw from shop
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> WithdrawFromShopWithHttpInfoAsync (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShopsApi : IShopsApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShopsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShopsApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShopsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ShopsApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShopsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShopsApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create shop Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <returns>CreateShop200Response</returns>
        public CreateShop200Response CreateShop (string xAuthorization, string xPassword, CreateShopRequest createShopRequest)
        {
             ApiResponse<CreateShop200Response> localVarResponse = CreateShopWithHttpInfo(xAuthorization, xPassword, createShopRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create shop Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <returns>ApiResponse of CreateShop200Response</returns>
        public ApiResponse<CreateShop200Response> CreateShopWithHttpInfo (string xAuthorization, string xPassword, CreateShopRequest createShopRequest)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->CreateShop");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->CreateShop");
            // verify the required parameter 'createShopRequest' is set
            if (createShopRequest == null)
                throw new ApiException(400, "Missing required parameter 'createShopRequest' when calling ShopsApi->CreateShop");

            var localVarPath = "/v1/shops";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createShopRequest != null && createShopRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createShopRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createShopRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateShop200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateShop200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShop200Response)));
        }

        /// <summary>
        /// Create shop Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateShop200Response</returns>
        public async System.Threading.Tasks.Task<CreateShop200Response> CreateShopAsync (string xAuthorization, string xPassword, CreateShopRequest createShopRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateShop200Response> localVarResponse = await CreateShopWithHttpInfoAsync(xAuthorization, xPassword, createShopRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create shop Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateShop200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateShop200Response>> CreateShopWithHttpInfoAsync (string xAuthorization, string xPassword, CreateShopRequest createShopRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->CreateShop");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->CreateShop");
            // verify the required parameter 'createShopRequest' is set
            if (createShopRequest == null)
                throw new ApiException(400, "Missing required parameter 'createShopRequest' when calling ShopsApi->CreateShop");

            var localVarPath = "/v1/shops";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createShopRequest != null && createShopRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createShopRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createShopRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateShop200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateShop200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateShop200Response)));
        }

        /// <summary>
        /// Get shop offer Returns a shop offer object for the provided shopOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <returns>ShopOffer</returns>
        public ShopOffer GetShopOffer (string shopId, string shopOfferId)
        {
             ApiResponse<ShopOffer> localVarResponse = GetShopOfferWithHttpInfo(shopId, shopOfferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get shop offer Returns a shop offer object for the provided shopOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of ShopOffer</returns>
        public ApiResponse<ShopOffer> GetShopOfferWithHttpInfo (string shopId, string shopOfferId)
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->GetShopOffer");
            // verify the required parameter 'shopOfferId' is set
            if (shopOfferId == null)
                throw new ApiException(400, "Missing required parameter 'shopOfferId' when calling ShopsApi->GetShopOffer");

            var localVarPath = "/v1/shops/{shopId}/items/{shopOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (shopOfferId != null) localVarPathParams.Add("shopOfferId", this.Configuration.ApiClient.ParameterToString(shopOfferId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShopOffer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShopOffer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShopOffer)));
        }

        /// <summary>
        /// Get shop offer Returns a shop offer object for the provided shopOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ShopOffer</returns>
        public async System.Threading.Tasks.Task<ShopOffer> GetShopOfferAsync (string shopId, string shopOfferId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ShopOffer> localVarResponse = await GetShopOfferWithHttpInfoAsync(shopId, shopOfferId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get shop offer Returns a shop offer object for the provided shopOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ShopOffer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShopOffer>> GetShopOfferWithHttpInfoAsync (string shopId, string shopOfferId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->GetShopOffer");
            // verify the required parameter 'shopOfferId' is set
            if (shopOfferId == null)
                throw new ApiException(400, "Missing required parameter 'shopOfferId' when calling ShopsApi->GetShopOffer");

            var localVarPath = "/v1/shops/{shopId}/items/{shopOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (shopOfferId != null) localVarPathParams.Add("shopOfferId", this.Configuration.ApiClient.ParameterToString(shopOfferId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShopOffer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShopOffer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShopOffer)));
        }

        /// <summary>
        /// Get shop offers Returns all shop offers as an array of shop offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <returns>List<ShopOffer></returns>
        public List<ShopOffer> GetShopOffers (string shopId)
        {
             ApiResponse<List<ShopOffer>> localVarResponse = GetShopOffersWithHttpInfo(shopId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get shop offers Returns all shop offers as an array of shop offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<ShopOffer></returns>
        public ApiResponse<List<ShopOffer>> GetShopOffersWithHttpInfo (string shopId)
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->GetShopOffers");

            var localVarPath = "/v1/shops/{shopId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ShopOffer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ShopOffer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ShopOffer>)));
        }

        /// <summary>
        /// Get shop offers Returns all shop offers as an array of shop offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ShopOffer></returns>
        public async System.Threading.Tasks.Task<List<ShopOffer>> GetShopOffersAsync (string shopId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ShopOffer>> localVarResponse = await GetShopOffersWithHttpInfoAsync(shopId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get shop offers Returns all shop offers as an array of shop offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ShopOffer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ShopOffer>>> GetShopOffersWithHttpInfoAsync (string shopId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->GetShopOffers");

            var localVarPath = "/v1/shops/{shopId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ShopOffer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ShopOffer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ShopOffer>)));
        }

        /// <summary>
        /// Get shops Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetShops200ResponseInner></returns>
        public List<GetShops200ResponseInner> GetShops (string xGameKey)
        {
             ApiResponse<List<GetShops200ResponseInner>> localVarResponse = GetShopsWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get shops Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetShops200ResponseInner></returns>
        public ApiResponse<List<GetShops200ResponseInner>> GetShopsWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ShopsApi->GetShops");

            var localVarPath = "/v1/shops";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShops", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetShops200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetShops200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetShops200ResponseInner>)));
        }

        /// <summary>
        /// Get shops Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetShops200ResponseInner></returns>
        public async System.Threading.Tasks.Task<List<GetShops200ResponseInner>> GetShopsAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GetShops200ResponseInner>> localVarResponse = await GetShopsWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get shops Returns an array of active shops for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetShops200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetShops200ResponseInner>>> GetShopsWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ShopsApi->GetShops");

            var localVarPath = "/v1/shops";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShops", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetShops200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetShops200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetShops200ResponseInner>)));
        }

        /// <summary>
        /// Remove shop offer Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>TransactionModel</returns>
        public TransactionModel RemoveShopOffer (string shopId, string shopOfferId, string xAuthorization, string xPassword)
        {
             ApiResponse<TransactionModel> localVarResponse = RemoveShopOfferWithHttpInfo(shopId, shopOfferId, xAuthorization, xPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove shop offer Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> RemoveShopOfferWithHttpInfo (string shopId, string shopOfferId, string xAuthorization, string xPassword)
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->RemoveShopOffer");
            // verify the required parameter 'shopOfferId' is set
            if (shopOfferId == null)
                throw new ApiException(400, "Missing required parameter 'shopOfferId' when calling ShopsApi->RemoveShopOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->RemoveShopOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->RemoveShopOffer");

            var localVarPath = "/v1/shops/{shopId}/offers/{shopOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (shopOfferId != null) localVarPathParams.Add("shopOfferId", this.Configuration.ApiClient.ParameterToString(shopOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Remove shop offer Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> RemoveShopOfferAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await RemoveShopOfferWithHttpInfoAsync(shopId, shopOfferId, xAuthorization, xPassword, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove shop offer Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RemoveShopOfferWithHttpInfoAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->RemoveShopOffer");
            // verify the required parameter 'shopOfferId' is set
            if (shopOfferId == null)
                throw new ApiException(400, "Missing required parameter 'shopOfferId' when calling ShopsApi->RemoveShopOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->RemoveShopOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->RemoveShopOffer");

            var localVarPath = "/v1/shops/{shopId}/offers/{shopOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (shopOfferId != null) localVarPathParams.Add("shopOfferId", this.Configuration.ApiClient.ParameterToString(shopOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set shop offer Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel SetShopOffer (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = SetShopOfferWithHttpInfo(shopId, xAuthorization, xPassword, setShopOfferRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set shop offer Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> SetShopOfferWithHttpInfo (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest)
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->SetShopOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->SetShopOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->SetShopOffer");
            // verify the required parameter 'setShopOfferRequest' is set
            if (setShopOfferRequest == null)
                throw new ApiException(400, "Missing required parameter 'setShopOfferRequest' when calling ShopsApi->SetShopOffer");

            var localVarPath = "/v1/shops/{shopId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setShopOfferRequest != null && setShopOfferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setShopOfferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setShopOfferRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set shop offer Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> SetShopOfferAsync (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await SetShopOfferWithHttpInfoAsync(shopId, xAuthorization, xPassword, setShopOfferRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set shop offer Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setShopOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetShopOfferWithHttpInfoAsync (string shopId, string xAuthorization, string xPassword, SetShopOfferRequest setShopOfferRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->SetShopOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->SetShopOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->SetShopOffer");
            // verify the required parameter 'setShopOfferRequest' is set
            if (setShopOfferRequest == null)
                throw new ApiException(400, "Missing required parameter 'setShopOfferRequest' when calling ShopsApi->SetShopOffer");

            var localVarPath = "/v1/shops/{shopId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setShopOfferRequest != null && setShopOfferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setShopOfferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setShopOfferRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Use shop offer Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>TransactionModel</returns>
        public TransactionModel UseShopOffer (string shopId, string shopOfferId, string xAuthorization, string xPassword)
        {
             ApiResponse<TransactionModel> localVarResponse = UseShopOfferWithHttpInfo(shopId, shopOfferId, xAuthorization, xPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use shop offer Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> UseShopOfferWithHttpInfo (string shopId, string shopOfferId, string xAuthorization, string xPassword)
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->UseShopOffer");
            // verify the required parameter 'shopOfferId' is set
            if (shopOfferId == null)
                throw new ApiException(400, "Missing required parameter 'shopOfferId' when calling ShopsApi->UseShopOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->UseShopOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->UseShopOffer");

            var localVarPath = "/v1/shops/{shopId}/offers/{shopOfferId}/uses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (shopOfferId != null) localVarPathParams.Add("shopOfferId", this.Configuration.ApiClient.ParameterToString(shopOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UseShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Use shop offer Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> UseShopOfferAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await UseShopOfferWithHttpInfoAsync(shopId, shopOfferId, xAuthorization, xPassword, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use shop offer Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="shopOfferId">Any offer id for the shop. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> UseShopOfferWithHttpInfoAsync (string shopId, string shopOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->UseShopOffer");
            // verify the required parameter 'shopOfferId' is set
            if (shopOfferId == null)
                throw new ApiException(400, "Missing required parameter 'shopOfferId' when calling ShopsApi->UseShopOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->UseShopOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->UseShopOffer");

            var localVarPath = "/v1/shops/{shopId}/offers/{shopOfferId}/uses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (shopOfferId != null) localVarPathParams.Add("shopOfferId", this.Configuration.ApiClient.ParameterToString(shopOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UseShopOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Withdraw from shop Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel WithdrawFromShop (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = WithdrawFromShopWithHttpInfo(shopId, xAuthorization, xPassword, withdrawFromShopRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw from shop Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> WithdrawFromShopWithHttpInfo (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest)
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->WithdrawFromShop");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->WithdrawFromShop");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->WithdrawFromShop");
            // verify the required parameter 'withdrawFromShopRequest' is set
            if (withdrawFromShopRequest == null)
                throw new ApiException(400, "Missing required parameter 'withdrawFromShopRequest' when calling ShopsApi->WithdrawFromShop");

            var localVarPath = "/v1/shops/{shopId}/withdrawals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (withdrawFromShopRequest != null && withdrawFromShopRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(withdrawFromShopRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = withdrawFromShopRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawFromShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Withdraw from shop Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> WithdrawFromShopAsync (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await WithdrawFromShopWithHttpInfoAsync(shopId, xAuthorization, xPassword, withdrawFromShopRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Withdraw from shop Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shopId">Any shop id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromShopRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> WithdrawFromShopWithHttpInfoAsync (string shopId, string xAuthorization, string xPassword, WithdrawFromShopRequest withdrawFromShopRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'shopId' is set
            if (shopId == null)
                throw new ApiException(400, "Missing required parameter 'shopId' when calling ShopsApi->WithdrawFromShop");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ShopsApi->WithdrawFromShop");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ShopsApi->WithdrawFromShop");
            // verify the required parameter 'withdrawFromShopRequest' is set
            if (withdrawFromShopRequest == null)
                throw new ApiException(400, "Missing required parameter 'withdrawFromShopRequest' when calling ShopsApi->WithdrawFromShop");

            var localVarPath = "/v1/shops/{shopId}/withdrawals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shopId != null) localVarPathParams.Add("shopId", this.Configuration.ApiClient.ParameterToString(shopId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (withdrawFromShopRequest != null && withdrawFromShopRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(withdrawFromShopRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = withdrawFromShopRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawFromShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

    }
}

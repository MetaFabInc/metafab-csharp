/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContractsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create custom contract
        /// </summary>
        /// <remarks>
        /// Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <returns>ContractModel</returns>
        ContractModel CreateContract (string xAuthorization, CreateContractRequest createContractRequest);

        /// <summary>
        /// Create custom contract
        /// </summary>
        /// <remarks>
        /// Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <returns>ApiResponse of ContractModel</returns>
        ApiResponse<ContractModel> CreateContractWithHttpInfo (string xAuthorization, CreateContractRequest createContractRequest);
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<ContractModel></returns>
        List<ContractModel> GetContracts (string xGameKey);

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<ContractModel></returns>
        ApiResponse<List<ContractModel>> GetContractsWithHttpInfo (string xGameKey);
        /// <summary>
        /// Read contract data
        /// </summary>
        /// <remarks>
        /// Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <returns>Object</returns>
        Object ReadContract (string contractId, string func, string args = default(string));

        /// <summary>
        /// Read contract data
        /// </summary>
        /// <remarks>
        /// Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReadContractWithHttpInfo (string contractId, string func, string args = default(string));
        /// <summary>
        /// Write contract data
        /// </summary>
        /// <remarks>
        /// MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel WriteContract (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest);

        /// <summary>
        /// Write contract data
        /// </summary>
        /// <remarks>
        /// MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> WriteContractWithHttpInfo (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create custom contract
        /// </summary>
        /// <remarks>
        /// Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ContractModel</returns>
        System.Threading.Tasks.Task<ContractModel> CreateContractAsync (string xAuthorization, CreateContractRequest createContractRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create custom contract
        /// </summary>
        /// <remarks>
        /// Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ContractModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractModel>> CreateContractWithHttpInfoAsync (string xAuthorization, CreateContractRequest createContractRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ContractModel></returns>
        System.Threading.Tasks.Task<List<ContractModel>> GetContractsAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get contracts
        /// </summary>
        /// <remarks>
        /// Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ContractModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContractModel>>> GetContractsWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Read contract data
        /// </summary>
        /// <remarks>
        /// Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReadContractAsync (string contractId, string func, string args = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Read contract data
        /// </summary>
        /// <remarks>
        /// Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReadContractWithHttpInfoAsync (string contractId, string func, string args = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Write contract data
        /// </summary>
        /// <remarks>
        /// MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> WriteContractAsync (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Write contract data
        /// </summary>
        /// <remarks>
        /// MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> WriteContractWithHttpInfoAsync (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContractsApi : IContractsApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractsApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContractsApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractsApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <returns>ContractModel</returns>
        public ContractModel CreateContract (string xAuthorization, CreateContractRequest createContractRequest)
        {
             ApiResponse<ContractModel> localVarResponse = CreateContractWithHttpInfo(xAuthorization, createContractRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <returns>ApiResponse of ContractModel</returns>
        public ApiResponse<ContractModel> CreateContractWithHttpInfo (string xAuthorization, CreateContractRequest createContractRequest)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContractsApi->CreateContract");
            // verify the required parameter 'createContractRequest' is set
            if (createContractRequest == null)
                throw new ApiException(400, "Missing required parameter 'createContractRequest' when calling ContractsApi->CreateContract");

            var localVarPath = "/v1/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (createContractRequest != null && createContractRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContractRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContractRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractModel)));
        }

        /// <summary>
        /// Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ContractModel</returns>
        public async System.Threading.Tasks.Task<ContractModel> CreateContractAsync (string xAuthorization, CreateContractRequest createContractRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ContractModel> localVarResponse = await CreateContractWithHttpInfoAsync(xAuthorization, createContractRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create custom contract Create a MetaFab custom contract entry from an existing contract address and contract abi. This allows the game and players belonging to the authenticated game to interact with the contract's read and write functions through MetaFab's read and write contract endpoints.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="createContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ContractModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractModel>> CreateContractWithHttpInfoAsync (string xAuthorization, CreateContractRequest createContractRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContractsApi->CreateContract");
            // verify the required parameter 'createContractRequest' is set
            if (createContractRequest == null)
                throw new ApiException(400, "Missing required parameter 'createContractRequest' when calling ContractsApi->CreateContract");

            var localVarPath = "/v1/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (createContractRequest != null && createContractRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContractRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContractRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractModel)));
        }

        /// <summary>
        /// Get contracts Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<ContractModel></returns>
        public List<ContractModel> GetContracts (string xGameKey)
        {
             ApiResponse<List<ContractModel>> localVarResponse = GetContractsWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contracts Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<ContractModel></returns>
        public ApiResponse<List<ContractModel>> GetContractsWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ContractsApi->GetContracts");

            var localVarPath = "/v1/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractModel>)));
        }

        /// <summary>
        /// Get contracts Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ContractModel></returns>
        public async System.Threading.Tasks.Task<List<ContractModel>> GetContractsAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ContractModel>> localVarResponse = await GetContractsWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contracts Returns an array of active contracts deployed by the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ContractModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContractModel>>> GetContractsWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ContractsApi->GetContracts");

            var localVarPath = "/v1/contracts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContracts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContractModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ContractModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContractModel>)));
        }

        /// <summary>
        /// Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <returns>Object</returns>
        public Object ReadContract (string contractId, string func, string args = default(string))
        {
             ApiResponse<Object> localVarResponse = ReadContractWithHttpInfo(contractId, func, args);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ReadContractWithHttpInfo (string contractId, string func, string args = default(string))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->ReadContract");
            // verify the required parameter 'func' is set
            if (func == null)
                throw new ApiException(400, "Missing required parameter 'func' when calling ContractsApi->ReadContract");

            var localVarPath = "/v1/contracts/{contractId}/reads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (func != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "func", func)); // query parameter
            if (args != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "args", args)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReadContractAsync (string contractId, string func, string args = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ReadContractWithHttpInfoAsync(contractId, func, args, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read contract data Oftentimes you'll want to query and retrieve some data from a contract. This is incredibly easy to do for any contract deployed through MetaFab.  Using this endpoint, you can get the data returned by any readable function listed in a contracts ABI. This could be things like querying the totalSupply of a currency contract, the number of owners of an items contract, and more.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="func">A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, &#x60;balanceOf&#x60;.</param>
        /// <param name="args">A comma seperated list of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, &#x60;123,\&quot;Hello\&quot;,false&#x60;. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReadContractWithHttpInfoAsync (string contractId, string func, string args = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->ReadContract");
            // verify the required parameter 'func' is set
            if (func == null)
                throw new ApiException(400, "Missing required parameter 'func' when calling ContractsApi->ReadContract");

            var localVarPath = "/v1/contracts/{contractId}/reads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (func != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "func", func)); // query parameter
            if (args != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "args", args)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel WriteContract (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = WriteContractWithHttpInfo(contractId, xAuthorization, xPassword, writeContractRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> WriteContractWithHttpInfo (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest)
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->WriteContract");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContractsApi->WriteContract");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ContractsApi->WriteContract");
            // verify the required parameter 'writeContractRequest' is set
            if (writeContractRequest == null)
                throw new ApiException(400, "Missing required parameter 'writeContractRequest' when calling ContractsApi->WriteContract");

            var localVarPath = "/v1/contracts/{contractId}/writes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (writeContractRequest != null && writeContractRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(writeContractRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = writeContractRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WriteContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> WriteContractAsync (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await WriteContractWithHttpInfoAsync(contractId, xAuthorization, xPassword, writeContractRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Write contract data MetaFab's convenience endpoints for contract interactions may not be flexible enough depending on your use case. For these situations, you can interact with contracts and create transactions directly.  Using this endpoint, you can execute a transaction for any writeable contract method as defined in the contract's ABI for the MetaFab contractId provided. Both Games and Player resources have authority to use this endpoint to execute transactions against any valid MetaFab contractId.  Additionally, MetaFab will automatically attempt to perform a gasless transaction for players interacting with a contract through this endpoint. Gasless transactions by players through this endpoint will only work if the target contract was deployed through MetaFab or supports MetaFab's ERC2771 trusted forwarder contract.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contractId">Any contract id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="writeContractRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> WriteContractWithHttpInfoAsync (string contractId, string xAuthorization, string xPassword, WriteContractRequest writeContractRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling ContractsApi->WriteContract");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContractsApi->WriteContract");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ContractsApi->WriteContract");
            // verify the required parameter 'writeContractRequest' is set
            if (writeContractRequest == null)
                throw new ApiException(400, "Missing required parameter 'writeContractRequest' when calling ContractsApi->WriteContract");

            var localVarPath = "/v1/contracts/{contractId}/writes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (writeContractRequest != null && writeContractRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(writeContractRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = writeContractRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WriteContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

    }
}

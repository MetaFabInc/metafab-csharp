/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILootboxesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create lootbox manager
        /// </summary>
        /// <remarks>
        /// Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <returns>CreateLootboxManager200Response</returns>
        CreateLootboxManager200Response CreateLootboxManager (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest);

        /// <summary>
        /// Create lootbox manager
        /// </summary>
        /// <remarks>
        /// Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <returns>ApiResponse of CreateLootboxManager200Response</returns>
        ApiResponse<CreateLootboxManager200Response> CreateLootboxManagerWithHttpInfo (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest);
        /// <summary>
        /// Get lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <returns>LootboxManagerLootbox</returns>
        LootboxManagerLootbox GetLootboxManagerLootbox (string lootboxManagerId, string lootboxManagerLootboxId);

        /// <summary>
        /// Get lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of LootboxManagerLootbox</returns>
        ApiResponse<LootboxManagerLootbox> GetLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string lootboxManagerLootboxId);
        /// <summary>
        /// Get lootbox manager lootboxes
        /// </summary>
        /// <remarks>
        /// Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <returns>List<LootboxManagerLootbox></returns>
        List<LootboxManagerLootbox> GetLootboxManagerLootboxes (string lootboxManagerId);

        /// <summary>
        /// Get lootbox manager lootboxes
        /// </summary>
        /// <remarks>
        /// Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<LootboxManagerLootbox></returns>
        ApiResponse<List<LootboxManagerLootbox>> GetLootboxManagerLootboxesWithHttpInfo (string lootboxManagerId);
        /// <summary>
        /// Get lootbox managers
        /// </summary>
        /// <remarks>
        /// Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetLootboxManagers200ResponseInner></returns>
        List<GetLootboxManagers200ResponseInner> GetLootboxManagers (string xGameKey);

        /// <summary>
        /// Get lootbox managers
        /// </summary>
        /// <remarks>
        /// Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetLootboxManagers200ResponseInner></returns>
        ApiResponse<List<GetLootboxManagers200ResponseInner>> GetLootboxManagersWithHttpInfo (string xGameKey);
        /// <summary>
        /// Open lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>List<TransactionModel></returns>
        List<TransactionModel> OpenLootboxManagerLootbox (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword);

        /// <summary>
        /// Open lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>ApiResponse of List<TransactionModel></returns>
        ApiResponse<List<TransactionModel>> OpenLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword);
        /// <summary>
        /// Remove lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>TransactionModel</returns>
        TransactionModel RemoveLootboxManagerLootbox (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword);

        /// <summary>
        /// Remove lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> RemoveLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword);
        /// <summary>
        /// Set lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel SetLootboxManagerLootbox (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest);

        /// <summary>
        /// Set lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> SetLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create lootbox manager
        /// </summary>
        /// <remarks>
        /// Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateLootboxManager200Response</returns>
        System.Threading.Tasks.Task<CreateLootboxManager200Response> CreateLootboxManagerAsync (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create lootbox manager
        /// </summary>
        /// <remarks>
        /// Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateLootboxManager200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLootboxManager200Response>> CreateLootboxManagerWithHttpInfoAsync (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LootboxManagerLootbox</returns>
        System.Threading.Tasks.Task<LootboxManagerLootbox> GetLootboxManagerLootboxAsync (string lootboxManagerId, string lootboxManagerLootboxId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LootboxManagerLootbox)</returns>
        System.Threading.Tasks.Task<ApiResponse<LootboxManagerLootbox>> GetLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string lootboxManagerLootboxId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get lootbox manager lootboxes
        /// </summary>
        /// <remarks>
        /// Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<LootboxManagerLootbox></returns>
        System.Threading.Tasks.Task<List<LootboxManagerLootbox>> GetLootboxManagerLootboxesAsync (string lootboxManagerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get lootbox manager lootboxes
        /// </summary>
        /// <remarks>
        /// Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LootboxManagerLootbox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LootboxManagerLootbox>>> GetLootboxManagerLootboxesWithHttpInfoAsync (string lootboxManagerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get lootbox managers
        /// </summary>
        /// <remarks>
        /// Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetLootboxManagers200ResponseInner></returns>
        System.Threading.Tasks.Task<List<GetLootboxManagers200ResponseInner>> GetLootboxManagersAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get lootbox managers
        /// </summary>
        /// <remarks>
        /// Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetLootboxManagers200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetLootboxManagers200ResponseInner>>> GetLootboxManagersWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Open lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionModel></returns>
        System.Threading.Tasks.Task<List<TransactionModel>> OpenLootboxManagerLootboxAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Open lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionModel>>> OpenLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> RemoveLootboxManagerLootboxAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RemoveLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> SetLootboxManagerLootboxAsync (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set lootbox manager lootbox
        /// </summary>
        /// <remarks>
        /// Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LootboxesApi : ILootboxesApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LootboxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LootboxesApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LootboxesApi"/> class
        /// </summary>
        /// <returns></returns>
        public LootboxesApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LootboxesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LootboxesApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create lootbox manager Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <returns>CreateLootboxManager200Response</returns>
        public CreateLootboxManager200Response CreateLootboxManager (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest)
        {
             ApiResponse<CreateLootboxManager200Response> localVarResponse = CreateLootboxManagerWithHttpInfo(xAuthorization, xPassword, createLootboxManagerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create lootbox manager Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <returns>ApiResponse of CreateLootboxManager200Response</returns>
        public ApiResponse<CreateLootboxManager200Response> CreateLootboxManagerWithHttpInfo (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->CreateLootboxManager");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->CreateLootboxManager");
            // verify the required parameter 'createLootboxManagerRequest' is set
            if (createLootboxManagerRequest == null)
                throw new ApiException(400, "Missing required parameter 'createLootboxManagerRequest' when calling LootboxesApi->CreateLootboxManager");

            var localVarPath = "/v1/lootboxManagers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createLootboxManagerRequest != null && createLootboxManagerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createLootboxManagerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createLootboxManagerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLootboxManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLootboxManager200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateLootboxManager200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLootboxManager200Response)));
        }

        /// <summary>
        /// Create lootbox manager Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateLootboxManager200Response</returns>
        public async System.Threading.Tasks.Task<CreateLootboxManager200Response> CreateLootboxManagerAsync (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateLootboxManager200Response> localVarResponse = await CreateLootboxManagerWithHttpInfoAsync(xAuthorization, xPassword, createLootboxManagerRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create lootbox manager Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createLootboxManagerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateLootboxManager200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLootboxManager200Response>> CreateLootboxManagerWithHttpInfoAsync (string xAuthorization, string xPassword, CreateLootboxManagerRequest createLootboxManagerRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->CreateLootboxManager");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->CreateLootboxManager");
            // verify the required parameter 'createLootboxManagerRequest' is set
            if (createLootboxManagerRequest == null)
                throw new ApiException(400, "Missing required parameter 'createLootboxManagerRequest' when calling LootboxesApi->CreateLootboxManager");

            var localVarPath = "/v1/lootboxManagers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createLootboxManagerRequest != null && createLootboxManagerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createLootboxManagerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createLootboxManagerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLootboxManager", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLootboxManager200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateLootboxManager200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLootboxManager200Response)));
        }

        /// <summary>
        /// Get lootbox manager lootbox Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <returns>LootboxManagerLootbox</returns>
        public LootboxManagerLootbox GetLootboxManagerLootbox (string lootboxManagerId, string lootboxManagerLootboxId)
        {
             ApiResponse<LootboxManagerLootbox> localVarResponse = GetLootboxManagerLootboxWithHttpInfo(lootboxManagerId, lootboxManagerLootboxId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get lootbox manager lootbox Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of LootboxManagerLootbox</returns>
        public ApiResponse<LootboxManagerLootbox> GetLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string lootboxManagerLootboxId)
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->GetLootboxManagerLootbox");
            // verify the required parameter 'lootboxManagerLootboxId' is set
            if (lootboxManagerLootboxId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerLootboxId' when calling LootboxesApi->GetLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (lootboxManagerLootboxId != null) localVarPathParams.Add("lootboxManagerLootboxId", this.Configuration.ApiClient.ParameterToString(lootboxManagerLootboxId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LootboxManagerLootbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LootboxManagerLootbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LootboxManagerLootbox)));
        }

        /// <summary>
        /// Get lootbox manager lootbox Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LootboxManagerLootbox</returns>
        public async System.Threading.Tasks.Task<LootboxManagerLootbox> GetLootboxManagerLootboxAsync (string lootboxManagerId, string lootboxManagerLootboxId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LootboxManagerLootbox> localVarResponse = await GetLootboxManagerLootboxWithHttpInfoAsync(lootboxManagerId, lootboxManagerLootboxId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lootbox manager lootbox Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LootboxManagerLootbox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LootboxManagerLootbox>> GetLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string lootboxManagerLootboxId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->GetLootboxManagerLootbox");
            // verify the required parameter 'lootboxManagerLootboxId' is set
            if (lootboxManagerLootboxId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerLootboxId' when calling LootboxesApi->GetLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (lootboxManagerLootboxId != null) localVarPathParams.Add("lootboxManagerLootboxId", this.Configuration.ApiClient.ParameterToString(lootboxManagerLootboxId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LootboxManagerLootbox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LootboxManagerLootbox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LootboxManagerLootbox)));
        }

        /// <summary>
        /// Get lootbox manager lootboxes Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <returns>List<LootboxManagerLootbox></returns>
        public List<LootboxManagerLootbox> GetLootboxManagerLootboxes (string lootboxManagerId)
        {
             ApiResponse<List<LootboxManagerLootbox>> localVarResponse = GetLootboxManagerLootboxesWithHttpInfo(lootboxManagerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get lootbox manager lootboxes Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<LootboxManagerLootbox></returns>
        public ApiResponse<List<LootboxManagerLootbox>> GetLootboxManagerLootboxesWithHttpInfo (string lootboxManagerId)
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->GetLootboxManagerLootboxes");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLootboxManagerLootboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LootboxManagerLootbox>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LootboxManagerLootbox>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LootboxManagerLootbox>)));
        }

        /// <summary>
        /// Get lootbox manager lootboxes Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<LootboxManagerLootbox></returns>
        public async System.Threading.Tasks.Task<List<LootboxManagerLootbox>> GetLootboxManagerLootboxesAsync (string lootboxManagerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<LootboxManagerLootbox>> localVarResponse = await GetLootboxManagerLootboxesWithHttpInfoAsync(lootboxManagerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lootbox manager lootboxes Returns all lootbox manager lootboxes as an array of lootbox objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;LootboxManagerLootbox&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LootboxManagerLootbox>>> GetLootboxManagerLootboxesWithHttpInfoAsync (string lootboxManagerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->GetLootboxManagerLootboxes");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLootboxManagerLootboxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LootboxManagerLootbox>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<LootboxManagerLootbox>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LootboxManagerLootbox>)));
        }

        /// <summary>
        /// Get lootbox managers Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetLootboxManagers200ResponseInner></returns>
        public List<GetLootboxManagers200ResponseInner> GetLootboxManagers (string xGameKey)
        {
             ApiResponse<List<GetLootboxManagers200ResponseInner>> localVarResponse = GetLootboxManagersWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get lootbox managers Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetLootboxManagers200ResponseInner></returns>
        public ApiResponse<List<GetLootboxManagers200ResponseInner>> GetLootboxManagersWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling LootboxesApi->GetLootboxManagers");

            var localVarPath = "/v1/lootboxManagers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLootboxManagers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetLootboxManagers200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetLootboxManagers200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetLootboxManagers200ResponseInner>)));
        }

        /// <summary>
        /// Get lootbox managers Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetLootboxManagers200ResponseInner></returns>
        public async System.Threading.Tasks.Task<List<GetLootboxManagers200ResponseInner>> GetLootboxManagersAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GetLootboxManagers200ResponseInner>> localVarResponse = await GetLootboxManagersWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lootbox managers Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetLootboxManagers200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetLootboxManagers200ResponseInner>>> GetLootboxManagersWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling LootboxesApi->GetLootboxManagers");

            var localVarPath = "/v1/lootboxManagers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLootboxManagers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetLootboxManagers200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetLootboxManagers200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetLootboxManagers200ResponseInner>)));
        }

        /// <summary>
        /// Open lootbox manager lootbox Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>List<TransactionModel></returns>
        public List<TransactionModel> OpenLootboxManagerLootbox (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword)
        {
             ApiResponse<List<TransactionModel>> localVarResponse = OpenLootboxManagerLootboxWithHttpInfo(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open lootbox manager lootbox Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>ApiResponse of List<TransactionModel></returns>
        public ApiResponse<List<TransactionModel>> OpenLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword)
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->OpenLootboxManagerLootbox");
            // verify the required parameter 'lootboxManagerLootboxId' is set
            if (lootboxManagerLootboxId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerLootboxId' when calling LootboxesApi->OpenLootboxManagerLootbox");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->OpenLootboxManagerLootbox");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->OpenLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (lootboxManagerLootboxId != null) localVarPathParams.Add("lootboxManagerLootboxId", this.Configuration.ApiClient.ParameterToString(lootboxManagerLootboxId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionModel>)));
        }

        /// <summary>
        /// Open lootbox manager lootbox Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionModel></returns>
        public async System.Threading.Tasks.Task<List<TransactionModel>> OpenLootboxManagerLootboxAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TransactionModel>> localVarResponse = await OpenLootboxManagerLootboxWithHttpInfoAsync(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xPassword, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open lootbox manager lootbox Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionModel>>> OpenLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->OpenLootboxManagerLootbox");
            // verify the required parameter 'lootboxManagerLootboxId' is set
            if (lootboxManagerLootboxId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerLootboxId' when calling LootboxesApi->OpenLootboxManagerLootbox");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->OpenLootboxManagerLootbox");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->OpenLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (lootboxManagerLootboxId != null) localVarPathParams.Add("lootboxManagerLootboxId", this.Configuration.ApiClient.ParameterToString(lootboxManagerLootboxId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionModel>)));
        }

        /// <summary>
        /// Remove lootbox manager lootbox Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>TransactionModel</returns>
        public TransactionModel RemoveLootboxManagerLootbox (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword)
        {
             ApiResponse<TransactionModel> localVarResponse = RemoveLootboxManagerLootboxWithHttpInfo(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove lootbox manager lootbox Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> RemoveLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword)
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->RemoveLootboxManagerLootbox");
            // verify the required parameter 'lootboxManagerLootboxId' is set
            if (lootboxManagerLootboxId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerLootboxId' when calling LootboxesApi->RemoveLootboxManagerLootbox");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->RemoveLootboxManagerLootbox");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->RemoveLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (lootboxManagerLootboxId != null) localVarPathParams.Add("lootboxManagerLootboxId", this.Configuration.ApiClient.ParameterToString(lootboxManagerLootboxId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Remove lootbox manager lootbox Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> RemoveLootboxManagerLootboxAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await RemoveLootboxManagerLootboxWithHttpInfoAsync(lootboxManagerId, lootboxManagerLootboxId, xAuthorization, xPassword, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove lootbox manager lootbox Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="lootboxManagerLootboxId">Any lootbox manager lootbox id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RemoveLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string lootboxManagerLootboxId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->RemoveLootboxManagerLootbox");
            // verify the required parameter 'lootboxManagerLootboxId' is set
            if (lootboxManagerLootboxId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerLootboxId' when calling LootboxesApi->RemoveLootboxManagerLootbox");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->RemoveLootboxManagerLootbox");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->RemoveLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (lootboxManagerLootboxId != null) localVarPathParams.Add("lootboxManagerLootboxId", this.Configuration.ApiClient.ParameterToString(lootboxManagerLootboxId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set lootbox manager lootbox Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel SetLootboxManagerLootbox (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = SetLootboxManagerLootboxWithHttpInfo(lootboxManagerId, xAuthorization, xPassword, setLootboxManagerLootboxRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set lootbox manager lootbox Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> SetLootboxManagerLootboxWithHttpInfo (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest)
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->SetLootboxManagerLootbox");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->SetLootboxManagerLootbox");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->SetLootboxManagerLootbox");
            // verify the required parameter 'setLootboxManagerLootboxRequest' is set
            if (setLootboxManagerLootboxRequest == null)
                throw new ApiException(400, "Missing required parameter 'setLootboxManagerLootboxRequest' when calling LootboxesApi->SetLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setLootboxManagerLootboxRequest != null && setLootboxManagerLootboxRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setLootboxManagerLootboxRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setLootboxManagerLootboxRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set lootbox manager lootbox Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> SetLootboxManagerLootboxAsync (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await SetLootboxManagerLootboxWithHttpInfoAsync(lootboxManagerId, xAuthorization, xPassword, setLootboxManagerLootboxRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set lootbox manager lootbox Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lootboxManagerId">Any lootbox manager id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setLootboxManagerLootboxRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetLootboxManagerLootboxWithHttpInfoAsync (string lootboxManagerId, string xAuthorization, string xPassword, SetLootboxManagerLootboxRequest setLootboxManagerLootboxRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'lootboxManagerId' is set
            if (lootboxManagerId == null)
                throw new ApiException(400, "Missing required parameter 'lootboxManagerId' when calling LootboxesApi->SetLootboxManagerLootbox");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling LootboxesApi->SetLootboxManagerLootbox");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling LootboxesApi->SetLootboxManagerLootbox");
            // verify the required parameter 'setLootboxManagerLootboxRequest' is set
            if (setLootboxManagerLootboxRequest == null)
                throw new ApiException(400, "Missing required parameter 'setLootboxManagerLootboxRequest' when calling LootboxesApi->SetLootboxManagerLootbox");

            var localVarPath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lootboxManagerId != null) localVarPathParams.Add("lootboxManagerId", this.Configuration.ApiClient.ParameterToString(lootboxManagerId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setLootboxManagerLootboxRequest != null && setLootboxManagerLootboxRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setLootboxManagerLootboxRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setLootboxManagerLootboxRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetLootboxManagerLootbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

    }
}

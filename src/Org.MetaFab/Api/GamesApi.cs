/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.43
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authenticate game
        /// </summary>
        /// <remarks>
        /// Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthGame200Response</returns>
        AuthGame200Response AuthGame ();

        /// <summary>
        /// Authenticate game
        /// </summary>
        /// <remarks>
        /// Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthGame200Response</returns>
        ApiResponse<AuthGame200Response> AuthGameWithHttpInfo ();
        /// <summary>
        /// Create game
        /// </summary>
        /// <remarks>
        /// Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <returns>AuthGame200Response</returns>
        AuthGame200Response CreateGame (CreateGameRequest createGameRequest);

        /// <summary>
        /// Create game
        /// </summary>
        /// <remarks>
        /// Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <returns>ApiResponse of AuthGame200Response</returns>
        ApiResponse<AuthGame200Response> CreateGameWithHttpInfo (CreateGameRequest createGameRequest);
        /// <summary>
        /// Update game
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <returns>GameModel</returns>
        GameModel UpdateGame (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest);

        /// <summary>
        /// Update game
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <returns>ApiResponse of GameModel</returns>
        ApiResponse<GameModel> UpdateGameWithHttpInfo (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Authenticate game
        /// </summary>
        /// <remarks>
        /// Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthGame200Response</returns>
        System.Threading.Tasks.Task<AuthGame200Response> AuthGameAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Authenticate game
        /// </summary>
        /// <remarks>
        /// Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthGame200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGame200Response>> AuthGameWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create game
        /// </summary>
        /// <remarks>
        /// Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthGame200Response</returns>
        System.Threading.Tasks.Task<AuthGame200Response> CreateGameAsync (CreateGameRequest createGameRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create game
        /// </summary>
        /// <remarks>
        /// Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthGame200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGame200Response>> CreateGameWithHttpInfoAsync (CreateGameRequest createGameRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update game
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GameModel</returns>
        System.Threading.Tasks.Task<GameModel> UpdateGameAsync (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update game
        /// </summary>
        /// <remarks>
        /// Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GameModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameModel>> UpdateGameWithHttpInfoAsync (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GamesApi : IGamesApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamesApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class
        /// </summary>
        /// <returns></returns>
        public GamesApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GamesApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthGame200Response</returns>
        public AuthGame200Response AuthGame ()
        {
             ApiResponse<AuthGame200Response> localVarResponse = AuthGameWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthGame200Response</returns>
        public ApiResponse<AuthGame200Response> AuthGameWithHttpInfo ()
        {

            var localVarPath = "/v1/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthGame200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthGame200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthGame200Response)));
        }

        /// <summary>
        /// Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthGame200Response</returns>
        public async System.Threading.Tasks.Task<AuthGame200Response> AuthGameAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthGame200Response> localVarResponse = await AuthGameWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate game Returns an existing game object containing authorization keys and credentials when provided a valid email (in place of username) and password login using Basic Auth.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthGame200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthGame200Response>> AuthGameWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthGame200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthGame200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthGame200Response)));
        }

        /// <summary>
        /// Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <returns>AuthGame200Response</returns>
        public AuthGame200Response CreateGame (CreateGameRequest createGameRequest)
        {
             ApiResponse<AuthGame200Response> localVarResponse = CreateGameWithHttpInfo(createGameRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <returns>ApiResponse of AuthGame200Response</returns>
        public ApiResponse<AuthGame200Response> CreateGameWithHttpInfo (CreateGameRequest createGameRequest)
        {
            // verify the required parameter 'createGameRequest' is set
            if (createGameRequest == null)
                throw new ApiException(400, "Missing required parameter 'createGameRequest' when calling GamesApi->CreateGame");

            var localVarPath = "/v1/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createGameRequest != null && createGameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGameRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthGame200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthGame200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthGame200Response)));
        }

        /// <summary>
        /// Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AuthGame200Response</returns>
        public async System.Threading.Tasks.Task<AuthGame200Response> CreateGameAsync (CreateGameRequest createGameRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AuthGame200Response> localVarResponse = await CreateGameWithHttpInfoAsync(createGameRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create game Create a new game. A game is the root entity required for all API interactions. Contracts, currencies, items and more are deployed by games, player accounts are created and registered to games, etc.  To use any of MetaFab's services, you must first create a game through this endpoint.  **Game creation is limited during our closed beta. Please contact ArkDev#4501 on Discord to be a part of our beta.**
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AuthGame200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthGame200Response>> CreateGameWithHttpInfoAsync (CreateGameRequest createGameRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'createGameRequest' is set
            if (createGameRequest == null)
                throw new ApiException(400, "Missing required parameter 'createGameRequest' when calling GamesApi->CreateGame");

            var localVarPath = "/v1/games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createGameRequest != null && createGameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createGameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createGameRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthGame200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AuthGame200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthGame200Response)));
        }

        /// <summary>
        /// Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <returns>GameModel</returns>
        public GameModel UpdateGame (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest)
        {
             ApiResponse<GameModel> localVarResponse = UpdateGameWithHttpInfo(gameId, xAuthorization, updateGameRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <returns>ApiResponse of GameModel</returns>
        public ApiResponse<GameModel> UpdateGameWithHttpInfo (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GamesApi->UpdateGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling GamesApi->UpdateGame");
            // verify the required parameter 'updateGameRequest' is set
            if (updateGameRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGameRequest' when calling GamesApi->UpdateGame");

            var localVarPath = "/v1/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updateGameRequest != null && updateGameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGameRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GameModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameModel)));
        }

        /// <summary>
        /// Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GameModel</returns>
        public async System.Threading.Tasks.Task<GameModel> UpdateGameAsync (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GameModel> localVarResponse = await UpdateGameWithHttpInfoAsync(gameId, xAuthorization, updateGameRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update game Update various fields specific to a game. Such as changing its password, resetting its published or secret key, or updating its RPCs.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Any game id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="updateGameRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GameModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GameModel>> UpdateGameWithHttpInfoAsync (string gameId, string xAuthorization, UpdateGameRequest updateGameRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GamesApi->UpdateGame");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling GamesApi->UpdateGame");
            // verify the required parameter 'updateGameRequest' is set
            if (updateGameRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateGameRequest' when calling GamesApi->UpdateGame");

            var localVarPath = "/v1/games/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameId != null) localVarPathParams.Add("gameId", this.Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (updateGameRequest != null && updateGameRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateGameRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateGameRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GameModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameModel)));
        }

    }
}

/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.MetaFab.Client;
using Org.MetaFab.Model;

namespace Org.MetaFab.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create exchange
        /// </summary>
        /// <remarks>
        /// Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <returns>CreateExchange200Response</returns>
        CreateExchange200Response CreateExchange (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest);

        /// <summary>
        /// Create exchange
        /// </summary>
        /// <remarks>
        /// Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <returns>ApiResponse of CreateExchange200Response</returns>
        ApiResponse<CreateExchange200Response> CreateExchangeWithHttpInfo (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest);
        /// <summary>
        /// Get exchange offer
        /// </summary>
        /// <remarks>
        /// Returns a exchange offer object for the provided exchangeOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <returns>ExchangeOffer</returns>
        ExchangeOffer GetExchangeOffer (string exchangeId, string exchangeOfferId);

        /// <summary>
        /// Get exchange offer
        /// </summary>
        /// <remarks>
        /// Returns a exchange offer object for the provided exchangeOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of ExchangeOffer</returns>
        ApiResponse<ExchangeOffer> GetExchangeOfferWithHttpInfo (string exchangeId, string exchangeOfferId);
        /// <summary>
        /// Get exchange offers
        /// </summary>
        /// <remarks>
        /// Returns all exchange offers as an array of exchange offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <returns>List<ExchangeOffer></returns>
        List<ExchangeOffer> GetExchangeOffers (string exchangeId);

        /// <summary>
        /// Get exchange offers
        /// </summary>
        /// <remarks>
        /// Returns all exchange offers as an array of exchange offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<ExchangeOffer></returns>
        ApiResponse<List<ExchangeOffer>> GetExchangeOffersWithHttpInfo (string exchangeId);
        /// <summary>
        /// Get exchanges
        /// </summary>
        /// <remarks>
        /// Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetExchanges200ResponseInner></returns>
        List<GetExchanges200ResponseInner> GetExchanges (string xGameKey);

        /// <summary>
        /// Get exchanges
        /// </summary>
        /// <remarks>
        /// Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetExchanges200ResponseInner></returns>
        ApiResponse<List<GetExchanges200ResponseInner>> GetExchangesWithHttpInfo (string xGameKey);
        /// <summary>
        /// Remove exchange offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>TransactionModel</returns>
        TransactionModel RemoveExchangeOffer (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword);

        /// <summary>
        /// Remove exchange offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> RemoveExchangeOfferWithHttpInfo (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword);
        /// <summary>
        /// Set exchange offer
        /// </summary>
        /// <remarks>
        /// Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel SetExchangeOffer (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest);

        /// <summary>
        /// Set exchange offer
        /// </summary>
        /// <remarks>
        /// Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> SetExchangeOfferWithHttpInfo (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest);
        /// <summary>
        /// Use exchange offer
        /// </summary>
        /// <remarks>
        /// Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>TransactionModel</returns>
        TransactionModel UseExchangeOffer (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword);

        /// <summary>
        /// Use exchange offer
        /// </summary>
        /// <remarks>
        /// Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> UseExchangeOfferWithHttpInfo (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword);
        /// <summary>
        /// Withdraw from exchange
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <returns>TransactionModel</returns>
        TransactionModel WithdrawFromExchange (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest);

        /// <summary>
        /// Withdraw from exchange
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        ApiResponse<TransactionModel> WithdrawFromExchangeWithHttpInfo (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create exchange
        /// </summary>
        /// <remarks>
        /// Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateExchange200Response</returns>
        System.Threading.Tasks.Task<CreateExchange200Response> CreateExchangeAsync (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create exchange
        /// </summary>
        /// <remarks>
        /// Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateExchange200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateExchange200Response>> CreateExchangeWithHttpInfoAsync (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get exchange offer
        /// </summary>
        /// <remarks>
        /// Returns a exchange offer object for the provided exchangeOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExchangeOffer</returns>
        System.Threading.Tasks.Task<ExchangeOffer> GetExchangeOfferAsync (string exchangeId, string exchangeOfferId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get exchange offer
        /// </summary>
        /// <remarks>
        /// Returns a exchange offer object for the provided exchangeOfferId.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExchangeOffer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangeOffer>> GetExchangeOfferWithHttpInfoAsync (string exchangeId, string exchangeOfferId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get exchange offers
        /// </summary>
        /// <remarks>
        /// Returns all exchange offers as an array of exchange offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ExchangeOffer></returns>
        System.Threading.Tasks.Task<List<ExchangeOffer>> GetExchangeOffersAsync (string exchangeId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get exchange offers
        /// </summary>
        /// <remarks>
        /// Returns all exchange offers as an array of exchange offer objects.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ExchangeOffer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ExchangeOffer>>> GetExchangeOffersWithHttpInfoAsync (string exchangeId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get exchanges
        /// </summary>
        /// <remarks>
        /// Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetExchanges200ResponseInner></returns>
        System.Threading.Tasks.Task<List<GetExchanges200ResponseInner>> GetExchangesAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get exchanges
        /// </summary>
        /// <remarks>
        /// Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetExchanges200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetExchanges200ResponseInner>>> GetExchangesWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove exchange offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> RemoveExchangeOfferAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove exchange offer
        /// </summary>
        /// <remarks>
        /// Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RemoveExchangeOfferWithHttpInfoAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set exchange offer
        /// </summary>
        /// <remarks>
        /// Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> SetExchangeOfferAsync (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set exchange offer
        /// </summary>
        /// <remarks>
        /// Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetExchangeOfferWithHttpInfoAsync (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Use exchange offer
        /// </summary>
        /// <remarks>
        /// Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> UseExchangeOfferAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Use exchange offer
        /// </summary>
        /// <remarks>
        /// Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> UseExchangeOfferWithHttpInfoAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Withdraw from exchange
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        System.Threading.Tasks.Task<TransactionModel> WithdrawFromExchangeAsync (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Withdraw from exchange
        /// </summary>
        /// <remarks>
        /// Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </remarks>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionModel>> WithdrawFromExchangeWithHttpInfoAsync (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangesApi : IExchangesApi
    {
        private Org.MetaFab.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExchangesApi(String basePath)
        {
            this.Configuration = new Org.MetaFab.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExchangesApi()
        {
            this.Configuration = Org.MetaFab.Client.Configuration.Default;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExchangesApi(Org.MetaFab.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.MetaFab.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.MetaFab.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.MetaFab.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.MetaFab.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <returns>CreateExchange200Response</returns>
        public CreateExchange200Response CreateExchange (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest)
        {
             ApiResponse<CreateExchange200Response> localVarResponse = CreateExchangeWithHttpInfo(xAuthorization, xPassword, createExchangeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <returns>ApiResponse of CreateExchange200Response</returns>
        public ApiResponse<CreateExchange200Response> CreateExchangeWithHttpInfo (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest)
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->CreateExchange");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->CreateExchange");
            // verify the required parameter 'createExchangeRequest' is set
            if (createExchangeRequest == null)
                throw new ApiException(400, "Missing required parameter 'createExchangeRequest' when calling ExchangesApi->CreateExchange");

            var localVarPath = "/v1/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createExchangeRequest != null && createExchangeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createExchangeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createExchangeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateExchange200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateExchange200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateExchange200Response)));
        }

        /// <summary>
        /// Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateExchange200Response</returns>
        public async System.Threading.Tasks.Task<CreateExchange200Response> CreateExchangeAsync (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateExchange200Response> localVarResponse = await CreateExchangeWithHttpInfoAsync(xAuthorization, xPassword, createExchangeRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create exchange Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="createExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateExchange200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateExchange200Response>> CreateExchangeWithHttpInfoAsync (string xAuthorization, string xPassword, CreateExchangeRequest createExchangeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->CreateExchange");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->CreateExchange");
            // verify the required parameter 'createExchangeRequest' is set
            if (createExchangeRequest == null)
                throw new ApiException(400, "Missing required parameter 'createExchangeRequest' when calling ExchangesApi->CreateExchange");

            var localVarPath = "/v1/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (createExchangeRequest != null && createExchangeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createExchangeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createExchangeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateExchange200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateExchange200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateExchange200Response)));
        }

        /// <summary>
        /// Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <returns>ExchangeOffer</returns>
        public ExchangeOffer GetExchangeOffer (string exchangeId, string exchangeOfferId)
        {
             ApiResponse<ExchangeOffer> localVarResponse = GetExchangeOfferWithHttpInfo(exchangeId, exchangeOfferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <returns>ApiResponse of ExchangeOffer</returns>
        public ApiResponse<ExchangeOffer> GetExchangeOfferWithHttpInfo (string exchangeId, string exchangeOfferId)
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->GetExchangeOffer");
            // verify the required parameter 'exchangeOfferId' is set
            if (exchangeOfferId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeOfferId' when calling ExchangesApi->GetExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/items/{exchangeOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (exchangeOfferId != null) localVarPathParams.Add("exchangeOfferId", this.Configuration.ApiClient.ParameterToString(exchangeOfferId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExchangeOffer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExchangeOffer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExchangeOffer)));
        }

        /// <summary>
        /// Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ExchangeOffer</returns>
        public async System.Threading.Tasks.Task<ExchangeOffer> GetExchangeOfferAsync (string exchangeId, string exchangeOfferId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ExchangeOffer> localVarResponse = await GetExchangeOfferWithHttpInfoAsync(exchangeId, exchangeOfferId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get exchange offer Returns a exchange offer object for the provided exchangeOfferId.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ExchangeOffer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExchangeOffer>> GetExchangeOfferWithHttpInfoAsync (string exchangeId, string exchangeOfferId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->GetExchangeOffer");
            // verify the required parameter 'exchangeOfferId' is set
            if (exchangeOfferId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeOfferId' when calling ExchangesApi->GetExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/items/{exchangeOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (exchangeOfferId != null) localVarPathParams.Add("exchangeOfferId", this.Configuration.ApiClient.ParameterToString(exchangeOfferId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExchangeOffer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExchangeOffer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExchangeOffer)));
        }

        /// <summary>
        /// Get exchange offers Returns all exchange offers as an array of exchange offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <returns>List<ExchangeOffer></returns>
        public List<ExchangeOffer> GetExchangeOffers (string exchangeId)
        {
             ApiResponse<List<ExchangeOffer>> localVarResponse = GetExchangeOffersWithHttpInfo(exchangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get exchange offers Returns all exchange offers as an array of exchange offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <returns>ApiResponse of List<ExchangeOffer></returns>
        public ApiResponse<List<ExchangeOffer>> GetExchangeOffersWithHttpInfo (string exchangeId)
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->GetExchangeOffers");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExchangeOffer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExchangeOffer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExchangeOffer>)));
        }

        /// <summary>
        /// Get exchange offers Returns all exchange offers as an array of exchange offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ExchangeOffer></returns>
        public async System.Threading.Tasks.Task<List<ExchangeOffer>> GetExchangeOffersAsync (string exchangeId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ExchangeOffer>> localVarResponse = await GetExchangeOffersWithHttpInfoAsync(exchangeId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get exchange offers Returns all exchange offers as an array of exchange offer objects.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ExchangeOffer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ExchangeOffer>>> GetExchangeOffersWithHttpInfoAsync (string exchangeId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->GetExchangeOffers");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchangeOffers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ExchangeOffer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ExchangeOffer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ExchangeOffer>)));
        }

        /// <summary>
        /// Get exchanges Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>List<GetExchanges200ResponseInner></returns>
        public List<GetExchanges200ResponseInner> GetExchanges (string xGameKey)
        {
             ApiResponse<List<GetExchanges200ResponseInner>> localVarResponse = GetExchangesWithHttpInfo(xGameKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get exchanges Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <returns>ApiResponse of List<GetExchanges200ResponseInner></returns>
        public ApiResponse<List<GetExchanges200ResponseInner>> GetExchangesWithHttpInfo (string xGameKey)
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ExchangesApi->GetExchanges");

            var localVarPath = "/v1/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetExchanges200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetExchanges200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetExchanges200ResponseInner>)));
        }

        /// <summary>
        /// Get exchanges Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<GetExchanges200ResponseInner></returns>
        public async System.Threading.Tasks.Task<List<GetExchanges200ResponseInner>> GetExchangesAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<GetExchanges200ResponseInner>> localVarResponse = await GetExchangesWithHttpInfoAsync(xGameKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get exchanges Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGameKey">The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;GetExchanges200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetExchanges200ResponseInner>>> GetExchangesWithHttpInfoAsync (string xGameKey, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'xGameKey' is set
            if (xGameKey == null)
                throw new ApiException(400, "Missing required parameter 'xGameKey' when calling ExchangesApi->GetExchanges");

            var localVarPath = "/v1/exchanges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xGameKey != null) localVarHeaderParams.Add("X-Game-Key", this.Configuration.ApiClient.ParameterToString(xGameKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExchanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetExchanges200ResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<GetExchanges200ResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetExchanges200ResponseInner>)));
        }

        /// <summary>
        /// Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>TransactionModel</returns>
        public TransactionModel RemoveExchangeOffer (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword)
        {
             ApiResponse<TransactionModel> localVarResponse = RemoveExchangeOfferWithHttpInfo(exchangeId, exchangeOfferId, xAuthorization, xPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> RemoveExchangeOfferWithHttpInfo (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword)
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->RemoveExchangeOffer");
            // verify the required parameter 'exchangeOfferId' is set
            if (exchangeOfferId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeOfferId' when calling ExchangesApi->RemoveExchangeOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->RemoveExchangeOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->RemoveExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (exchangeOfferId != null) localVarPathParams.Add("exchangeOfferId", this.Configuration.ApiClient.ParameterToString(exchangeOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> RemoveExchangeOfferAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await RemoveExchangeOfferWithHttpInfoAsync(exchangeId, exchangeOfferId, xAuthorization, xPassword, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove exchange offer Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> RemoveExchangeOfferWithHttpInfoAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->RemoveExchangeOffer");
            // verify the required parameter 'exchangeOfferId' is set
            if (exchangeOfferId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeOfferId' when calling ExchangesApi->RemoveExchangeOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->RemoveExchangeOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->RemoveExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (exchangeOfferId != null) localVarPathParams.Add("exchangeOfferId", this.Configuration.ApiClient.ParameterToString(exchangeOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel SetExchangeOffer (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = SetExchangeOfferWithHttpInfo(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> SetExchangeOfferWithHttpInfo (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest)
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->SetExchangeOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->SetExchangeOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->SetExchangeOffer");
            // verify the required parameter 'setExchangeOfferRequest' is set
            if (setExchangeOfferRequest == null)
                throw new ApiException(400, "Missing required parameter 'setExchangeOfferRequest' when calling ExchangesApi->SetExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setExchangeOfferRequest != null && setExchangeOfferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setExchangeOfferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setExchangeOfferRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> SetExchangeOfferAsync (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await SetExchangeOfferWithHttpInfoAsync(exchangeId, xAuthorization, xPassword, setExchangeOfferRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set exchange offer Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="setExchangeOfferRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> SetExchangeOfferWithHttpInfoAsync (string exchangeId, string xAuthorization, string xPassword, SetExchangeOfferRequest setExchangeOfferRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->SetExchangeOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->SetExchangeOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->SetExchangeOffer");
            // verify the required parameter 'setExchangeOfferRequest' is set
            if (setExchangeOfferRequest == null)
                throw new ApiException(400, "Missing required parameter 'setExchangeOfferRequest' when calling ExchangesApi->SetExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (setExchangeOfferRequest != null && setExchangeOfferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setExchangeOfferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setExchangeOfferRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>TransactionModel</returns>
        public TransactionModel UseExchangeOffer (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword)
        {
             ApiResponse<TransactionModel> localVarResponse = UseExchangeOfferWithHttpInfo(exchangeId, exchangeOfferId, xAuthorization, xPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> UseExchangeOfferWithHttpInfo (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword)
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->UseExchangeOffer");
            // verify the required parameter 'exchangeOfferId' is set
            if (exchangeOfferId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeOfferId' when calling ExchangesApi->UseExchangeOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->UseExchangeOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->UseExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (exchangeOfferId != null) localVarPathParams.Add("exchangeOfferId", this.Configuration.ApiClient.ParameterToString(exchangeOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UseExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> UseExchangeOfferAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await UseExchangeOfferWithHttpInfoAsync(exchangeId, exchangeOfferId, xAuthorization, xPassword, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use exchange offer Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="exchangeOfferId">Any offer id for the exchange. Zero, or a positive integer.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player.</param>
        /// <param name="xPassword">The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> UseExchangeOfferWithHttpInfoAsync (string exchangeId, string exchangeOfferId, string xAuthorization, string xPassword, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->UseExchangeOffer");
            // verify the required parameter 'exchangeOfferId' is set
            if (exchangeOfferId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeOfferId' when calling ExchangesApi->UseExchangeOffer");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->UseExchangeOffer");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->UseExchangeOffer");

            var localVarPath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (exchangeOfferId != null) localVarPathParams.Add("exchangeOfferId", this.Configuration.ApiClient.ParameterToString(exchangeOfferId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UseExchangeOffer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <returns>TransactionModel</returns>
        public TransactionModel WithdrawFromExchange (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest)
        {
             ApiResponse<TransactionModel> localVarResponse = WithdrawFromExchangeWithHttpInfo(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <returns>ApiResponse of TransactionModel</returns>
        public ApiResponse<TransactionModel> WithdrawFromExchangeWithHttpInfo (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest)
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->WithdrawFromExchange");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->WithdrawFromExchange");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->WithdrawFromExchange");
            // verify the required parameter 'withdrawFromExchangeRequest' is set
            if (withdrawFromExchangeRequest == null)
                throw new ApiException(400, "Missing required parameter 'withdrawFromExchangeRequest' when calling ExchangesApi->WithdrawFromExchange");

            var localVarPath = "/v1/exchanges/{exchangeId}/withdrawals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (withdrawFromExchangeRequest != null && withdrawFromExchangeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(withdrawFromExchangeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = withdrawFromExchangeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawFromExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

        /// <summary>
        /// Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TransactionModel</returns>
        public async System.Threading.Tasks.Task<TransactionModel> WithdrawFromExchangeAsync (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TransactionModel> localVarResponse = await WithdrawFromExchangeWithHttpInfoAsync(exchangeId, xAuthorization, xPassword, withdrawFromExchangeRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Withdraw from exchange Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
        /// </summary>
        /// <exception cref="Org.MetaFab.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Any exchange id within the MetaFab ecosystem.</param>
        /// <param name="xAuthorization">The &#x60;secretKey&#x60; of the authenticating game.</param>
        /// <param name="xPassword">The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.</param>
        /// <param name="withdrawFromExchangeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionModel>> WithdrawFromExchangeWithHttpInfoAsync (string exchangeId, string xAuthorization, string xPassword, WithdrawFromExchangeRequest withdrawFromExchangeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'exchangeId' is set
            if (exchangeId == null)
                throw new ApiException(400, "Missing required parameter 'exchangeId' when calling ExchangesApi->WithdrawFromExchange");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ExchangesApi->WithdrawFromExchange");
            // verify the required parameter 'xPassword' is set
            if (xPassword == null)
                throw new ApiException(400, "Missing required parameter 'xPassword' when calling ExchangesApi->WithdrawFromExchange");
            // verify the required parameter 'withdrawFromExchangeRequest' is set
            if (withdrawFromExchangeRequest == null)
                throw new ApiException(400, "Missing required parameter 'withdrawFromExchangeRequest' when calling ExchangesApi->WithdrawFromExchange");

            var localVarPath = "/v1/exchanges/{exchangeId}/withdrawals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarPathParams.Add("exchangeId", this.Configuration.ApiClient.ParameterToString(exchangeId)); // path parameter
            if (xAuthorization != null) localVarHeaderParams.Add("X-Authorization", this.Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (xPassword != null) localVarHeaderParams.Add("X-Password", this.Configuration.ApiClient.ParameterToString(xPassword)); // header parameter
            if (withdrawFromExchangeRequest != null && withdrawFromExchangeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(withdrawFromExchangeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = withdrawFromExchangeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawFromExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionModel)));
        }

    }
}

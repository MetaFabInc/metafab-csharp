/*
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.MetaFab.Client.OpenAPIDateConverter;

namespace Org.MetaFab.Model
{
    /// <summary>
    /// AuthGame200ResponseAllOf
    /// </summary>
    [DataContract]
    public partial class AuthGame200ResponseAllOf :  IEquatable<AuthGame200ResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthGame200ResponseAllOf" /> class.
        /// </summary>
        /// <param name="walletDecryptKey">This field has not had a description added..</param>
        /// <param name="wallet">wallet.</param>
        /// <param name="fundingWallet">fundingWallet.</param>
        public AuthGame200ResponseAllOf(string walletDecryptKey = default(string), WalletModel wallet = default(WalletModel), WalletModel fundingWallet = default(WalletModel))
        {
            this.WalletDecryptKey = walletDecryptKey;
            this.Wallet = wallet;
            this.FundingWallet = fundingWallet;
        }

        /// <summary>
        /// This field has not had a description added.
        /// </summary>
        /// <value>This field has not had a description added.</value>
        [DataMember(Name="walletDecryptKey", EmitDefaultValue=false)]
        public string WalletDecryptKey { get; set; }

        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [DataMember(Name="wallet", EmitDefaultValue=false)]
        public WalletModel Wallet { get; set; }

        /// <summary>
        /// Gets or Sets FundingWallet
        /// </summary>
        [DataMember(Name="fundingWallet", EmitDefaultValue=false)]
        public WalletModel FundingWallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthGame200ResponseAllOf {\n");
            sb.Append("  WalletDecryptKey: ").Append(WalletDecryptKey).Append("\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("  FundingWallet: ").Append(FundingWallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthGame200ResponseAllOf);
        }

        /// <summary>
        /// Returns true if AuthGame200ResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthGame200ResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthGame200ResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WalletDecryptKey == input.WalletDecryptKey ||
                    (this.WalletDecryptKey != null &&
                    this.WalletDecryptKey.Equals(input.WalletDecryptKey))
                ) && 
                (
                    this.Wallet == input.Wallet ||
                    (this.Wallet != null &&
                    this.Wallet.Equals(input.Wallet))
                ) && 
                (
                    this.FundingWallet == input.FundingWallet ||
                    (this.FundingWallet != null &&
                    this.FundingWallet.Equals(input.FundingWallet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WalletDecryptKey != null)
                    hashCode = hashCode * 59 + this.WalletDecryptKey.GetHashCode();
                if (this.Wallet != null)
                    hashCode = hashCode * 59 + this.Wallet.GetHashCode();
                if (this.FundingWallet != null)
                    hashCode = hashCode * 59 + this.FundingWallet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

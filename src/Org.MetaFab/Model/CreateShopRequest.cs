/*
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.MetaFab.Client.OpenAPIDateConverter;

namespace Org.MetaFab.Model
{
    /// <summary>
    /// CreateShopRequest
    /// </summary>
    [DataContract]
    public partial class CreateShopRequest :  IEquatable<CreateShopRequest>, IValidatableObject
    {
        /// <summary>
        /// The blockchain you want to deploy this shop on. Support for new blockchains are added over time.
        /// </summary>
        /// <value>The blockchain you want to deploy this shop on. Support for new blockchains are added over time.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChainEnum
        {
            /// <summary>
            /// Enum ARBITRUM for value: ARBITRUM
            /// </summary>
            [EnumMember(Value = "ARBITRUM")]
            ARBITRUM = 1,

            /// <summary>
            /// Enum ARBITRUMGOERLI for value: ARBITRUMGOERLI
            /// </summary>
            [EnumMember(Value = "ARBITRUMGOERLI")]
            ARBITRUMGOERLI = 2,

            /// <summary>
            /// Enum ARBITRUMNOVA for value: ARBITRUMNOVA
            /// </summary>
            [EnumMember(Value = "ARBITRUMNOVA")]
            ARBITRUMNOVA = 3,

            /// <summary>
            /// Enum AVALANCHE for value: AVALANCHE
            /// </summary>
            [EnumMember(Value = "AVALANCHE")]
            AVALANCHE = 4,

            /// <summary>
            /// Enum AVALANCHEFUJI for value: AVALANCHEFUJI
            /// </summary>
            [EnumMember(Value = "AVALANCHEFUJI")]
            AVALANCHEFUJI = 5,

            /// <summary>
            /// Enum ETHEREUM for value: ETHEREUM
            /// </summary>
            [EnumMember(Value = "ETHEREUM")]
            ETHEREUM = 6,

            /// <summary>
            /// Enum FANTOM for value: FANTOM
            /// </summary>
            [EnumMember(Value = "FANTOM")]
            FANTOM = 7,

            /// <summary>
            /// Enum FANTOMTEST for value: FANTOMTEST
            /// </summary>
            [EnumMember(Value = "FANTOMTEST")]
            FANTOMTEST = 8,

            /// <summary>
            /// Enum GOERLI for value: GOERLI
            /// </summary>
            [EnumMember(Value = "GOERLI")]
            GOERLI = 9,

            /// <summary>
            /// Enum MATIC for value: MATIC
            /// </summary>
            [EnumMember(Value = "MATIC")]
            MATIC = 10,

            /// <summary>
            /// Enum MATICMUMBAI for value: MATICMUMBAI
            /// </summary>
            [EnumMember(Value = "MATICMUMBAI")]
            MATICMUMBAI = 11,

            /// <summary>
            /// Enum THUNDERCORE for value: THUNDERCORE
            /// </summary>
            [EnumMember(Value = "THUNDERCORE")]
            THUNDERCORE = 12,

            /// <summary>
            /// Enum THUNDERCORETESTNET for value: THUNDERCORETESTNET
            /// </summary>
            [EnumMember(Value = "THUNDERCORETESTNET")]
            THUNDERCORETESTNET = 13

        }

        /// <summary>
        /// The blockchain you want to deploy this shop on. Support for new blockchains are added over time.
        /// </summary>
        /// <value>The blockchain you want to deploy this shop on. Support for new blockchains are added over time.</value>
        [DataMember(Name="chain", EmitDefaultValue=true)]
        public ChainEnum Chain { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShopRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateShopRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShopRequest" /> class.
        /// </summary>
        /// <param name="name">The name of this item collection. This can be anything, such as &#x60;Production - Game Shop&#x60;, &#x60;Testing - My Game Shop&#x60;, etc..</param>
        /// <param name="chain">The blockchain you want to deploy this shop on. Support for new blockchains are added over time. (required).</param>
        public CreateShopRequest(string name = default(string), ChainEnum chain = default(ChainEnum))
        {
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new InvalidDataException("chain is a required property for CreateShopRequest and cannot be null");
            }
            else
            {
                this.Chain = chain;
            }

            this.Name = name;
        }

        /// <summary>
        /// The name of this item collection. This can be anything, such as &#x60;Production - Game Shop&#x60;, &#x60;Testing - My Game Shop&#x60;, etc.
        /// </summary>
        /// <value>The name of this item collection. This can be anything, such as &#x60;Production - Game Shop&#x60;, &#x60;Testing - My Game Shop&#x60;, etc.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateShopRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShopRequest);
        }

        /// <summary>
        /// Returns true if CreateShopRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShopRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShopRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Chain == input.Chain ||
                    (this.Chain != null &&
                    this.Chain.Equals(input.Chain))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Chain != null)
                    hashCode = hashCode * 59 + this.Chain.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

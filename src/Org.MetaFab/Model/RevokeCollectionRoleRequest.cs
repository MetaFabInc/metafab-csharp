/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.MetaFab.Client.OpenAPIDateConverter;

namespace Org.MetaFab.Model
{
    /// <summary>
    /// RevokeCollectionRoleRequest
    /// </summary>
    [DataContract]
    public partial class RevokeCollectionRoleRequest :  IEquatable<RevokeCollectionRoleRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RevokeCollectionRoleRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RevokeCollectionRoleRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RevokeCollectionRoleRequest" /> class.
        /// </summary>
        /// <param name="role">A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; (required).</param>
        /// <param name="address">A valid EVM based address to revoke the role from..</param>
        /// <param name="walletId">A wallet id within the MetaFab ecosystem to revoke the role from..</param>
        public RevokeCollectionRoleRequest(string role = default(string), string address = default(string), List<string> walletId = default(List<string>))
        {
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new InvalidDataException("role is a required property for RevokeCollectionRoleRequest and cannot be null");
            }
            else
            {
                this.Role = role;
            }

            this.Address = address;
            this.WalletId = walletId;
        }

        /// <summary>
        /// A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;
        /// </summary>
        /// <value>A valid MetaFab role or bytes string representing a role, such as &#x60;minter&#x60; or &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60;</value>
        [DataMember(Name="role", EmitDefaultValue=true)]
        public string Role { get; set; }

        /// <summary>
        /// A valid EVM based address to revoke the role from.
        /// </summary>
        /// <value>A valid EVM based address to revoke the role from.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// A wallet id within the MetaFab ecosystem to revoke the role from.
        /// </summary>
        /// <value>A wallet id within the MetaFab ecosystem to revoke the role from.</value>
        [DataMember(Name="walletId", EmitDefaultValue=false)]
        public List<string> WalletId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RevokeCollectionRoleRequest {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  WalletId: ").Append(WalletId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RevokeCollectionRoleRequest);
        }

        /// <summary>
        /// Returns true if RevokeCollectionRoleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RevokeCollectionRoleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RevokeCollectionRoleRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.WalletId == input.WalletId ||
                    this.WalletId != null &&
                    input.WalletId != null &&
                    this.WalletId.SequenceEqual(input.WalletId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.WalletId != null)
                    hashCode = hashCode * 59 + this.WalletId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

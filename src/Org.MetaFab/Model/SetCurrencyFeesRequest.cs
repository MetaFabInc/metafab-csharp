/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.MetaFab.Client.OpenAPIDateConverter;

namespace Org.MetaFab.Model
{
    /// <summary>
    /// SetCurrencyFeesRequest
    /// </summary>
    [DataContract]
    public partial class SetCurrencyFeesRequest :  IEquatable<SetCurrencyFeesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetCurrencyFeesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetCurrencyFeesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetCurrencyFeesRequest" /> class.
        /// </summary>
        /// <param name="recipientAddress">The recipient address of currency transaction fees. (required).</param>
        /// <param name="basisPoints">A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees. (required).</param>
        /// <param name="fixedAmount">A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees. (required).</param>
        /// <param name="capAmount">The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead. (required).</param>
        public SetCurrencyFeesRequest(string recipientAddress = default(string), decimal basisPoints = default(decimal), decimal fixedAmount = default(decimal), decimal capAmount = default(decimal))
        {
            // to ensure "recipientAddress" is required (not null)
            if (recipientAddress == null)
            {
                throw new InvalidDataException("recipientAddress is a required property for SetCurrencyFeesRequest and cannot be null");
            }
            else
            {
                this.RecipientAddress = recipientAddress;
            }

            // to ensure "basisPoints" is required (not null)
            if (basisPoints == null)
            {
                throw new InvalidDataException("basisPoints is a required property for SetCurrencyFeesRequest and cannot be null");
            }
            else
            {
                this.BasisPoints = basisPoints;
            }

            // to ensure "fixedAmount" is required (not null)
            if (fixedAmount == null)
            {
                throw new InvalidDataException("fixedAmount is a required property for SetCurrencyFeesRequest and cannot be null");
            }
            else
            {
                this.FixedAmount = fixedAmount;
            }

            // to ensure "capAmount" is required (not null)
            if (capAmount == null)
            {
                throw new InvalidDataException("capAmount is a required property for SetCurrencyFeesRequest and cannot be null");
            }
            else
            {
                this.CapAmount = capAmount;
            }

        }

        /// <summary>
        /// The recipient address of currency transaction fees.
        /// </summary>
        /// <value>The recipient address of currency transaction fees.</value>
        [DataMember(Name="recipientAddress", EmitDefaultValue=true)]
        public string RecipientAddress { get; set; }

        /// <summary>
        /// A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees.
        /// </summary>
        /// <value>A percentage fee for every transaction represented in basis points. To set a 1.5% fee, you would use a value of 150. This value can be 0, denoting no percentage fees.</value>
        [DataMember(Name="basisPoints", EmitDefaultValue=true)]
        public decimal BasisPoints { get; set; }

        /// <summary>
        /// A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees.
        /// </summary>
        /// <value>A fixed fee for every transaction. A value of 0.5 would mean 0.5 of the currency of a transaction is always taken as a fee. This value can be 0, denoting no fixed fees.</value>
        [DataMember(Name="fixedAmount", EmitDefaultValue=true)]
        public decimal FixedAmount { get; set; }

        /// <summary>
        /// The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead.
        /// </summary>
        /// <value>The maximum fee amount for any single transaction. The total fee of a transaction is calculated as the sum of the basis points (percentage) fee, and fixed fee. If a calculated fee is greater than this maximum fee value, the maximum fee will be used instead.</value>
        [DataMember(Name="capAmount", EmitDefaultValue=true)]
        public decimal CapAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetCurrencyFeesRequest {\n");
            sb.Append("  RecipientAddress: ").Append(RecipientAddress).Append("\n");
            sb.Append("  BasisPoints: ").Append(BasisPoints).Append("\n");
            sb.Append("  FixedAmount: ").Append(FixedAmount).Append("\n");
            sb.Append("  CapAmount: ").Append(CapAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetCurrencyFeesRequest);
        }

        /// <summary>
        /// Returns true if SetCurrencyFeesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SetCurrencyFeesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetCurrencyFeesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecipientAddress == input.RecipientAddress ||
                    (this.RecipientAddress != null &&
                    this.RecipientAddress.Equals(input.RecipientAddress))
                ) && 
                (
                    this.BasisPoints == input.BasisPoints ||
                    (this.BasisPoints != null &&
                    this.BasisPoints.Equals(input.BasisPoints))
                ) && 
                (
                    this.FixedAmount == input.FixedAmount ||
                    (this.FixedAmount != null &&
                    this.FixedAmount.Equals(input.FixedAmount))
                ) && 
                (
                    this.CapAmount == input.CapAmount ||
                    (this.CapAmount != null &&
                    this.CapAmount.Equals(input.CapAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecipientAddress != null)
                    hashCode = hashCode * 59 + this.RecipientAddress.GetHashCode();
                if (this.BasisPoints != null)
                    hashCode = hashCode * 59 + this.BasisPoints.GetHashCode();
                if (this.FixedAmount != null)
                    hashCode = hashCode * 59 + this.FixedAmount.GetHashCode();
                if (this.CapAmount != null)
                    hashCode = hashCode * 59 + this.CapAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.MetaFab.Client.OpenAPIDateConverter;

namespace Org.MetaFab.Model
{
    /// <summary>
    /// Key should be the contract address, value is the permissions object request for the contract.
    /// </summary>
    [DataContract]
    public partial class ProfilePermissionsValue :  IEquatable<ProfilePermissionsValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilePermissionsValue" /> class.
        /// </summary>
        /// <param name="chain">The target chain for the contract and related permissions..</param>
        /// <param name="scopes">An optional array of valid permissioning scopes..</param>
        /// <param name="functions">An optional array of contract functions to request permission for..</param>
        /// <param name="erc20Limit">A maximum lifetime limit of erc20 that can be tranferred for this contract address..</param>
        /// <param name="erc1155Limits">An object mapping erc1155 ids to maximum lifetime transfer limits of each permitted item id supplied for this contract address..</param>
        public ProfilePermissionsValue(string chain = default(string), List<string> scopes = default(List<string>), List<string> functions = default(List<string>), int erc20Limit = default(int), Dictionary<string, int> erc1155Limits = default(Dictionary<string, int>))
        {
            this.Chain = chain;
            this.Scopes = scopes;
            this.Functions = functions;
            this.Erc20Limit = erc20Limit;
            this.Erc1155Limits = erc1155Limits;
        }

        /// <summary>
        /// The target chain for the contract and related permissions.
        /// </summary>
        /// <value>The target chain for the contract and related permissions.</value>
        [DataMember(Name="chain", EmitDefaultValue=false)]
        public string Chain { get; set; }

        /// <summary>
        /// An optional array of valid permissioning scopes.
        /// </summary>
        /// <value>An optional array of valid permissioning scopes.</value>
        [DataMember(Name="scopes", EmitDefaultValue=false)]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// An optional array of contract functions to request permission for.
        /// </summary>
        /// <value>An optional array of contract functions to request permission for.</value>
        [DataMember(Name="functions", EmitDefaultValue=false)]
        public List<string> Functions { get; set; }

        /// <summary>
        /// A maximum lifetime limit of erc20 that can be tranferred for this contract address.
        /// </summary>
        /// <value>A maximum lifetime limit of erc20 that can be tranferred for this contract address.</value>
        [DataMember(Name="erc20Limit", EmitDefaultValue=false)]
        public int Erc20Limit { get; set; }

        /// <summary>
        /// An object mapping erc1155 ids to maximum lifetime transfer limits of each permitted item id supplied for this contract address.
        /// </summary>
        /// <value>An object mapping erc1155 ids to maximum lifetime transfer limits of each permitted item id supplied for this contract address.</value>
        [DataMember(Name="erc1155Limits", EmitDefaultValue=false)]
        public Dictionary<string, int> Erc1155Limits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfilePermissionsValue {\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  Erc20Limit: ").Append(Erc20Limit).Append("\n");
            sb.Append("  Erc1155Limits: ").Append(Erc1155Limits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfilePermissionsValue);
        }

        /// <summary>
        /// Returns true if ProfilePermissionsValue instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfilePermissionsValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfilePermissionsValue input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Chain == input.Chain ||
                    (this.Chain != null &&
                    this.Chain.Equals(input.Chain))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.Functions == input.Functions ||
                    this.Functions != null &&
                    input.Functions != null &&
                    this.Functions.SequenceEqual(input.Functions)
                ) && 
                (
                    this.Erc20Limit == input.Erc20Limit ||
                    (this.Erc20Limit != null &&
                    this.Erc20Limit.Equals(input.Erc20Limit))
                ) && 
                (
                    this.Erc1155Limits == input.Erc1155Limits ||
                    this.Erc1155Limits != null &&
                    input.Erc1155Limits != null &&
                    this.Erc1155Limits.SequenceEqual(input.Erc1155Limits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Chain != null)
                    hashCode = hashCode * 59 + this.Chain.GetHashCode();
                if (this.Scopes != null)
                    hashCode = hashCode * 59 + this.Scopes.GetHashCode();
                if (this.Functions != null)
                    hashCode = hashCode * 59 + this.Functions.GetHashCode();
                if (this.Erc20Limit != null)
                    hashCode = hashCode * 59 + this.Erc20Limit.GetHashCode();
                if (this.Erc1155Limits != null)
                    hashCode = hashCode * 59 + this.Erc1155Limits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
